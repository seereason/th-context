{-# LANGUAGE CPP #-}
{-# LANGUAGE TemplateHaskell #-}
module Values where

import Control.Monad (filterM)
import Data.Map as Map (toList)
import Data.Set as Set (Set, fromList, toList, union)
import GHC.Prim -- ByteArray#, Char#, etc
import Language.Haskell.TH
import Language.Haskell.TH.Context.Expand (expandType)
import Language.Haskell.TH.Context.Helpers (typeArity)
import Language.Haskell.TH.Context.TypeGraph (typeGraphVertices, typeGraphEdges, VertexStatus(Vertex))
import Language.Haskell.TH.Desugar (withLocalDeclarations)
import Language.Haskell.TH.Instances ()
import Language.Haskell.TH.Syntax
import Test.Hspec hiding (runIO)
import Test.Hspec.Core.Spec (SpecM)

import Common

subtypesOfType :: Set String
subtypesOfType =
    fromList
    [
#if MIN_VERSION_template_haskell(2,10,0)
      "BigNat.BN#[1]::ByteArray#",
      "Integer.Jn#[1]::BigNat",
      "Integer.Jp#[1]::BigNat",
      "NameFlavour.NameL[1]::Int",
      "NameFlavour.NameU[1]::Int",
      "Type.ForallT[2]::[Type] (aka Cxt)",
#else
      "Integer.J#[1]::Int#",
      "Integer.J#[2]::ByteArray#",
      "NameFlavour.NameL[1]::Int#",
      "NameFlavour.NameU[1]::Int#",
      "Pred.ClassP[1]::Name",
      "Pred.ClassP[2]::[Type]",
      "Pred.EqualP[1]::Type",
      "Pred.EqualP[2]::Type",
      "Type.ForallT[2]::[Pred] (aka Cxt)",
      "Pred",
#endif
      "Char.C#[1]::Char#",
      "Int.I#[1]::Int#",
      "Integer.S#[1]::Int#",
      "ModName.ModName[1]::[Char] (aka String)",
      "Name.Name[1]::OccName",
      "Name.Name[2]::NameFlavour",
      "NameFlavour.NameG[1]::NameSpace",
      "NameFlavour.NameG[2]::PkgName",
      "NameFlavour.NameG[3]::ModName",
      "NameFlavour.NameQ[1]::ModName",
      "OccName.OccName[1]::[Char] (aka String)",
      "PkgName.PkgName[1]::[Char] (aka String)",
      "TyLit.NumTyLit[1]::Integer",
      "TyLit.StrTyLit[1]::[Char] (aka String)",
      "TyVarBndr.KindedTV[1]::Name",
      "TyVarBndr.KindedTV[2]::Type (aka Kind)",
      "TyVarBndr.PlainTV[1]::Name",
      "Type.AppT[1]::Type",
      "Type.AppT[2]::Type",
      "Type.ConT[1]::Name",
      "Type.ForallT[1]::[TyVarBndr]",
      "Type.ForallT[3]::Type",
      "Type.LitT[1]::TyLit",
      "Type.PromotedT[1]::Name",
      "Type.PromotedTupleT[1]::Int",
      "Type.SigT[1]::Type",
      "Type.SigT[2]::Type (aka Kind)",
      "Type.TupleT[1]::Int",
      "Type.UnboxedTupleT[1]::Int",
      "Type.VarT[1]::Name",
      "Char",
      "TyVarBndr",
      "Type",
      "[]"
    ]

decEdges :: Set (String, [String])
decEdges =
    fromList
      [
#if MIN_VERSION_template_haskell(2,10,0)
       ("(,)",[]),
       ("(,) Guard",["Guard","(,)"]),
       ("(,) Name",["Name","(,)"]),
       ("(,) Strict",["Strict","(,)"]),
       ("(,,)",[]),
       ("(,,) Name",["Name","(,,)"]),
       ("(,,) Name Strict",["(,,) Name","Strict"]),
       ("(Guard, Exp)",["(,) Guard","Exp"]),
       ("(Name, Exp)",["(,) Name","Exp"]),
       ("(Name, Pat)",["(,) Name","Pat"]),
       ("(Name, Strict, Type)",["(,,) Name Strict","Type"]),
       ("(Strict, Type)",["(,) Strict","Type"]),
       ("AnnTarget.TypeAnnotation[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("AnnTarget.ValueAnnotation[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("BigNat.BN#[1]::ByteArray#",[]),
       ("Body.GuardedB[1]::[(Guard, Exp)]",["(Guard, Exp)","[]"]),
       ("Body.NormalB[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Char",["Char.C#[1]::Char#"]),
       ("Char.C#[1]::Char#",[]),
       ("Clause",["Clause.Clause[1]::[Pat]","Clause.Clause[2]::Body","Clause.Clause[3]::[Dec]"]),
       ("Clause.Clause[1]::[Pat]",["Pat","[]"]),
       ("Clause.Clause[2]::Body",["Body.GuardedB[1]::[(Guard, Exp)]","Body.NormalB[1]::Exp"]),
       ("Clause.Clause[3]::[Dec]",["Dec","[]"]),
       ("Con",["Con.ForallC[1]::[TyVarBndr]","Con.ForallC[2]::[Type] (aka Cxt)","Con.ForallC[3]::Con","Con.InfixC[1]::(Strict, Type) (aka StrictType)","Con.InfixC[2]::Name","Con.InfixC[3]::(Strict, Type) (aka StrictType)","Con.NormalC[1]::Name","Con.NormalC[2]::[(Strict, Type)]","Con.RecC[1]::Name","Con.RecC[2]::[(Name, Strict, Type)]"]),
       ("Con.ForallC[1]::[TyVarBndr]",["TyVarBndr","[]"]),
       ("Con.ForallC[2]::[Type] (aka Cxt)",["Type","[]"]),
       ("Con.ForallC[3]::Con",["Con.ForallC[1]::[TyVarBndr]","Con.ForallC[2]::[Type] (aka Cxt)","Con.ForallC[3]::Con","Con.InfixC[1]::(Strict, Type) (aka StrictType)","Con.InfixC[2]::Name","Con.InfixC[3]::(Strict, Type) (aka StrictType)","Con.NormalC[1]::Name","Con.NormalC[2]::[(Strict, Type)]","Con.RecC[1]::Name","Con.RecC[2]::[(Name, Strict, Type)]"]),
       ("Con.InfixC[1]::(Strict, Type) (aka StrictType)",["(,) Strict","Type"]),
       ("Con.InfixC[2]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Con.InfixC[3]::(Strict, Type) (aka StrictType)",["(,) Strict","Type"]),
       ("Con.NormalC[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Con.NormalC[2]::[(Strict, Type)]",["(Strict, Type)","[]"]),
       ("Con.RecC[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Con.RecC[2]::[(Name, Strict, Type)]",["(Name, Strict, Type)","[]"]),
       ("Dec",["Dec.ClassD[1]::[Type] (aka Cxt)","Dec.ClassD[2]::Name","Dec.ClassD[3]::[TyVarBndr]","Dec.ClassD[4]::[FunDep]","Dec.ClassD[5]::[Dec]","Dec.ClosedTypeFamilyD[1]::Name","Dec.ClosedTypeFamilyD[2]::[TyVarBndr]","Dec.ClosedTypeFamilyD[3]::Maybe Type","Dec.ClosedTypeFamilyD[4]::[TySynEqn]","Dec.DataD[1]::[Type] (aka Cxt)","Dec.DataD[2]::Name","Dec.DataD[3]::[TyVarBndr]","Dec.DataD[4]::[Con]","Dec.DataD[5]::[Name]","Dec.DataInstD[1]::[Type] (aka Cxt)","Dec.DataInstD[2]::Name","Dec.DataInstD[3]::[Type]","Dec.DataInstD[4]::[Con]","Dec.DataInstD[5]::[Name]","Dec.DefaultSigD[1]::Name","Dec.DefaultSigD[2]::Type","Dec.FamilyD[1]::FamFlavour","Dec.FamilyD[2]::Name","Dec.FamilyD[3]::[TyVarBndr]","Dec.FamilyD[4]::Maybe Type","Dec.ForeignD[1]::Foreign","Dec.FunD[1]::Name","Dec.FunD[2]::[Clause]","Dec.InfixD[1]::Fixity","Dec.InfixD[2]::Name","Dec.InstanceD[1]::[Type] (aka Cxt)","Dec.InstanceD[2]::Type","Dec.InstanceD[3]::[Dec]","Dec.NewtypeD[1]::[Type] (aka Cxt)","Dec.NewtypeD[2]::Name","Dec.NewtypeD[3]::[TyVarBndr]","Dec.NewtypeD[4]::Con","Dec.NewtypeD[5]::[Name]","Dec.NewtypeInstD[1]::[Type] (aka Cxt)","Dec.NewtypeInstD[2]::Name","Dec.NewtypeInstD[3]::[Type]","Dec.NewtypeInstD[4]::Con","Dec.NewtypeInstD[5]::[Name]","Dec.PragmaD[1]::Pragma","Dec.RoleAnnotD[1]::Name","Dec.RoleAnnotD[2]::[Role]","Dec.SigD[1]::Name","Dec.SigD[2]::Type","Dec.StandaloneDerivD[1]::[Type] (aka Cxt)","Dec.StandaloneDerivD[2]::Type","Dec.TySynD[1]::Name","Dec.TySynD[2]::[TyVarBndr]","Dec.TySynD[3]::Type","Dec.TySynInstD[1]::Name","Dec.TySynInstD[2]::TySynEqn","Dec.ValD[1]::Pat","Dec.ValD[2]::Body","Dec.ValD[3]::[Dec]"]),
       ("Dec.ClassD[1]::[Type] (aka Cxt)",["Type","[]"]),
       ("Dec.ClassD[2]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.ClassD[3]::[TyVarBndr]",["TyVarBndr","[]"]),
       ("Dec.ClassD[4]::[FunDep]",["FunDep","[]"]),
       ("Dec.ClassD[5]::[Dec]",["Dec","[]"]),
       ("Dec.ClosedTypeFamilyD[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.ClosedTypeFamilyD[2]::[TyVarBndr]",["TyVarBndr","[]"]),
       ("Dec.ClosedTypeFamilyD[3]::Maybe Type",["Maybe","Type"]),
       ("Dec.ClosedTypeFamilyD[4]::[TySynEqn]",["TySynEqn","[]"]),
       ("Dec.DataD[1]::[Type] (aka Cxt)",["Type","[]"]),
       ("Dec.DataD[2]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.DataD[3]::[TyVarBndr]",["TyVarBndr","[]"]),
       ("Dec.DataD[4]::[Con]",["Con","[]"]),
       ("Dec.DataD[5]::[Name]",["Name","[]"]),
       ("Dec.DataInstD[1]::[Type] (aka Cxt)",["Type","[]"]),
       ("Dec.DataInstD[2]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.DataInstD[3]::[Type]",["Type","[]"]),
       ("Dec.DataInstD[4]::[Con]",["Con","[]"]),
       ("Dec.DataInstD[5]::[Name]",["Name","[]"]),
       ("Dec.DefaultSigD[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.DefaultSigD[2]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Dec.FamilyD[1]::FamFlavour",[]),
       ("Dec.FamilyD[2]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.FamilyD[3]::[TyVarBndr]",["TyVarBndr","[]"]),
       ("Dec.FamilyD[4]::Maybe Type",["Maybe","Type"]),
       ("Dec.ForeignD[1]::Foreign",["Foreign.ExportF[1]::Callconv","Foreign.ExportF[2]::[Char] (aka String)","Foreign.ExportF[3]::Name","Foreign.ExportF[4]::Type","Foreign.ImportF[1]::Callconv","Foreign.ImportF[2]::Safety","Foreign.ImportF[3]::[Char] (aka String)","Foreign.ImportF[4]::Name","Foreign.ImportF[5]::Type"]),
       ("Dec.FunD[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.FunD[2]::[Clause]",["Clause","[]"]),
       ("Dec.InfixD[1]::Fixity",["Fixity.Fixity[1]::Int","Fixity.Fixity[2]::FixityDirection"]),
       ("Dec.InfixD[2]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.InstanceD[1]::[Type] (aka Cxt)",["Type","[]"]),
       ("Dec.InstanceD[2]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Dec.InstanceD[3]::[Dec]",["Dec","[]"]),
       ("Dec.NewtypeD[1]::[Type] (aka Cxt)",["Type","[]"]),
       ("Dec.NewtypeD[2]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.NewtypeD[3]::[TyVarBndr]",["TyVarBndr","[]"]),
       ("Dec.NewtypeD[4]::Con",["Con.ForallC[1]::[TyVarBndr]","Con.ForallC[2]::[Type] (aka Cxt)","Con.ForallC[3]::Con","Con.InfixC[1]::(Strict, Type) (aka StrictType)","Con.InfixC[2]::Name","Con.InfixC[3]::(Strict, Type) (aka StrictType)","Con.NormalC[1]::Name","Con.NormalC[2]::[(Strict, Type)]","Con.RecC[1]::Name","Con.RecC[2]::[(Name, Strict, Type)]"]),
       ("Dec.NewtypeD[5]::[Name]",["Name","[]"]),
       ("Dec.NewtypeInstD[1]::[Type] (aka Cxt)",["Type","[]"]),
       ("Dec.NewtypeInstD[2]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.NewtypeInstD[3]::[Type]",["Type","[]"]),
       ("Dec.NewtypeInstD[4]::Con",["Con.ForallC[1]::[TyVarBndr]","Con.ForallC[2]::[Type] (aka Cxt)","Con.ForallC[3]::Con","Con.InfixC[1]::(Strict, Type) (aka StrictType)","Con.InfixC[2]::Name","Con.InfixC[3]::(Strict, Type) (aka StrictType)","Con.NormalC[1]::Name","Con.NormalC[2]::[(Strict, Type)]","Con.RecC[1]::Name","Con.RecC[2]::[(Name, Strict, Type)]"]),
       ("Dec.NewtypeInstD[5]::[Name]",["Name","[]"]),
       ("Dec.PragmaD[1]::Pragma",["Pragma.AnnP[1]::AnnTarget","Pragma.AnnP[2]::Exp","Pragma.InlineP[1]::Name","Pragma.InlineP[2]::Inline","Pragma.InlineP[3]::RuleMatch","Pragma.InlineP[4]::Phases","Pragma.LineP[1]::Int","Pragma.LineP[2]::[Char] (aka String)","Pragma.RuleP[1]::[Char] (aka String)","Pragma.RuleP[2]::[RuleBndr]","Pragma.RuleP[3]::Exp","Pragma.RuleP[4]::Exp","Pragma.RuleP[5]::Phases","Pragma.SpecialiseInstP[1]::Type","Pragma.SpecialiseP[1]::Name","Pragma.SpecialiseP[2]::Type","Pragma.SpecialiseP[3]::Maybe Inline","Pragma.SpecialiseP[4]::Phases"]),
       ("Dec.RoleAnnotD[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.RoleAnnotD[2]::[Role]",["Role","[]"]),
       ("Dec.SigD[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.SigD[2]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Dec.StandaloneDerivD[1]::[Type] (aka Cxt)",["Type","[]"]),
       ("Dec.StandaloneDerivD[2]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Dec.TySynD[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.TySynD[2]::[TyVarBndr]",["TyVarBndr","[]"]),
       ("Dec.TySynD[3]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Dec.TySynInstD[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.TySynInstD[2]::TySynEqn",["TySynEqn.TySynEqn[1]::[Type]","TySynEqn.TySynEqn[2]::Type"]),
       ("Dec.ValD[1]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Dec.ValD[2]::Body",["Body.GuardedB[1]::[(Guard, Exp)]","Body.NormalB[1]::Exp"]),
       ("Dec.ValD[3]::[Dec]",["Dec","[]"]),
       ("Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.AppE[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.AppE[2]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.ArithSeqE[1]::Range",["Range.FromR[1]::Exp","Range.FromThenR[1]::Exp","Range.FromThenR[2]::Exp","Range.FromThenToR[1]::Exp","Range.FromThenToR[2]::Exp","Range.FromThenToR[3]::Exp","Range.FromToR[1]::Exp","Range.FromToR[2]::Exp"]),
       ("Exp.CaseE[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.CaseE[2]::[Match]",["Match","[]"]),
       ("Exp.CompE[1]::[Stmt]",["Stmt","[]"]),
       ("Exp.ConE[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Exp.CondE[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.CondE[2]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.CondE[3]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.DoE[1]::[Stmt]",["Stmt","[]"]),
       ("Exp.InfixE[1]::Maybe Exp",["Maybe","Exp"]),
       ("Exp.InfixE[2]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.InfixE[3]::Maybe Exp",["Maybe","Exp"]),
       ("Exp.LamCaseE[1]::[Match]",["Match","[]"]),
       ("Exp.LamE[1]::[Pat]",["Pat","[]"]),
       ("Exp.LamE[2]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.LetE[1]::[Dec]",["Dec","[]"]),
       ("Exp.LetE[2]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.ListE[1]::[Exp]",["Exp","[]"]),
       ("Exp.LitE[1]::Lit",["Lit.CharL[1]::Char","Lit.DoublePrimL[1]::Ratio Integer (aka Rational)","Lit.FloatPrimL[1]::Ratio Integer (aka Rational)","Lit.IntPrimL[1]::Integer","Lit.IntegerL[1]::Integer","Lit.RationalL[1]::Ratio Integer (aka Rational)","Lit.StringL[1]::[Char] (aka String)","Lit.StringPrimL[1]::[Word8]","Lit.WordPrimL[1]::Integer"]),
       ("Exp.MultiIfE[1]::[(Guard, Exp)]",["(Guard, Exp)","[]"]),
       ("Exp.ParensE[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.RecConE[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Exp.RecConE[2]::[(Name, Exp)]",["(Name, Exp)","[]"]),
       ("Exp.RecUpdE[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.RecUpdE[2]::[(Name, Exp)]",["(Name, Exp)","[]"]),
       ("Exp.SigE[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.SigE[2]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Exp.StaticE[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.TupE[1]::[Exp]",["Exp","[]"]),
       ("Exp.UInfixE[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.UInfixE[2]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.UInfixE[3]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.UnboxedTupE[1]::[Exp]",["Exp","[]"]),
       ("Exp.VarE[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Fixity.Fixity[1]::Int",["Int.I#[1]::Int#"]),
       ("Fixity.Fixity[2]::FixityDirection",[]),
       ("Foreign.ExportF[1]::Callconv",[]),
       ("Foreign.ExportF[2]::[Char] (aka String)",["Char","[]"]),
       ("Foreign.ExportF[3]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Foreign.ExportF[4]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Foreign.ImportF[1]::Callconv",[]),
       ("Foreign.ImportF[2]::Safety",[]),
       ("Foreign.ImportF[3]::[Char] (aka String)",["Char","[]"]),
       ("Foreign.ImportF[4]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Foreign.ImportF[5]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("FunDep",["FunDep.FunDep[1]::[Name]","FunDep.FunDep[2]::[Name]"]),
       ("FunDep.FunDep[1]::[Name]",["Name","[]"]),
       ("FunDep.FunDep[2]::[Name]",["Name","[]"]),
       ("Guard",["Guard.NormalG[1]::Exp","Guard.PatG[1]::[Stmt]"]),
       ("Guard.NormalG[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Guard.PatG[1]::[Stmt]",["Stmt","[]"]),
       ("Inline",[]),
       ("Int.I#[1]::Int#",[]),
       ("Integer",["Integer.Jn#[1]::BigNat","Integer.Jp#[1]::BigNat","Integer.S#[1]::Int#"]),
       ("Integer.Jn#[1]::BigNat",["BigNat.BN#[1]::ByteArray#"]),
       ("Integer.Jp#[1]::BigNat",["BigNat.BN#[1]::ByteArray#"]),
       ("Integer.S#[1]::Int#",[]),
       ("Lit.CharL[1]::Char",["Char.C#[1]::Char#"]),
       ("Lit.DoublePrimL[1]::Ratio Integer (aka Rational)",["Ratio","Integer"]),
       ("Lit.FloatPrimL[1]::Ratio Integer (aka Rational)",["Ratio","Integer"]),
       ("Lit.IntPrimL[1]::Integer",["Integer.Jn#[1]::BigNat","Integer.Jp#[1]::BigNat","Integer.S#[1]::Int#"]),
       ("Lit.IntegerL[1]::Integer",["Integer.Jn#[1]::BigNat","Integer.Jp#[1]::BigNat","Integer.S#[1]::Int#"]),
       ("Lit.RationalL[1]::Ratio Integer (aka Rational)",["Ratio","Integer"]),
       ("Lit.StringL[1]::[Char] (aka String)",["Char","[]"]),
       ("Lit.StringPrimL[1]::[Word8]",["Word8","[]"]),
       ("Lit.WordPrimL[1]::Integer",["Integer.Jn#[1]::BigNat","Integer.Jp#[1]::BigNat","Integer.S#[1]::Int#"]),
       ("Match",["Match.Match[1]::Pat","Match.Match[2]::Body","Match.Match[3]::[Dec]"]),
       ("Match.Match[1]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Match.Match[2]::Body",["Body.GuardedB[1]::[(Guard, Exp)]","Body.NormalB[1]::Exp"]),
       ("Match.Match[3]::[Dec]",["Dec","[]"]),
       ("Maybe",["Maybe.Just[1]::a"]),
       ("Maybe.Just[1]::a",[]),
       ("ModName.ModName[1]::[Char] (aka String)",["Char","[]"]),
       ("Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Name.Name[1]::OccName",["OccName.OccName[1]::[Char] (aka String)"]),
       ("Name.Name[2]::NameFlavour",["NameFlavour.NameG[1]::NameSpace","NameFlavour.NameG[2]::PkgName","NameFlavour.NameG[3]::ModName","NameFlavour.NameL[1]::Int","NameFlavour.NameQ[1]::ModName","NameFlavour.NameU[1]::Int"]),
       ("NameFlavour.NameG[1]::NameSpace",[]),
       ("NameFlavour.NameG[2]::PkgName",["PkgName.PkgName[1]::[Char] (aka String)"]),
       ("NameFlavour.NameG[3]::ModName",["ModName.ModName[1]::[Char] (aka String)"]),
       ("NameFlavour.NameL[1]::Int",["Int.I#[1]::Int#"]),
       ("NameFlavour.NameQ[1]::ModName",["ModName.ModName[1]::[Char] (aka String)"]),
       ("NameFlavour.NameU[1]::Int",["Int.I#[1]::Int#"]),
       ("OccName.OccName[1]::[Char] (aka String)",["Char","[]"]),
       ("Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Pat.AsP[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Pat.AsP[2]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Pat.BangP[1]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Pat.ConP[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Pat.ConP[2]::[Pat]",["Pat","[]"]),
       ("Pat.InfixP[1]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Pat.InfixP[2]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Pat.InfixP[3]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Pat.ListP[1]::[Pat]",["Pat","[]"]),
       ("Pat.LitP[1]::Lit",["Lit.CharL[1]::Char","Lit.DoublePrimL[1]::Ratio Integer (aka Rational)","Lit.FloatPrimL[1]::Ratio Integer (aka Rational)","Lit.IntPrimL[1]::Integer","Lit.IntegerL[1]::Integer","Lit.RationalL[1]::Ratio Integer (aka Rational)","Lit.StringL[1]::[Char] (aka String)","Lit.StringPrimL[1]::[Word8]","Lit.WordPrimL[1]::Integer"]),
       ("Pat.ParensP[1]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Pat.RecP[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Pat.RecP[2]::[(Name, Pat)]",["(Name, Pat)","[]"]),
       ("Pat.SigP[1]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Pat.SigP[2]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Pat.TildeP[1]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Pat.TupP[1]::[Pat]",["Pat","[]"]),
       ("Pat.UInfixP[1]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Pat.UInfixP[2]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Pat.UInfixP[3]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Pat.UnboxedTupP[1]::[Pat]",["Pat","[]"]),
       ("Pat.VarP[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Pat.ViewP[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Pat.ViewP[2]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Phases.BeforePhase[1]::Int",["Int.I#[1]::Int#"]),
       ("Phases.FromPhase[1]::Int",["Int.I#[1]::Int#"]),
       ("PkgName.PkgName[1]::[Char] (aka String)",["Char","[]"]),
       ("Pragma.AnnP[1]::AnnTarget",["AnnTarget.TypeAnnotation[1]::Name","AnnTarget.ValueAnnotation[1]::Name"]),
       ("Pragma.AnnP[2]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Pragma.InlineP[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Pragma.InlineP[2]::Inline",[]),
       ("Pragma.InlineP[3]::RuleMatch",[]),
       ("Pragma.InlineP[4]::Phases",["Phases.BeforePhase[1]::Int","Phases.FromPhase[1]::Int"]),
       ("Pragma.LineP[1]::Int",["Int.I#[1]::Int#"]),
       ("Pragma.LineP[2]::[Char] (aka String)",["Char","[]"]),
       ("Pragma.RuleP[1]::[Char] (aka String)",["Char","[]"]),
       ("Pragma.RuleP[2]::[RuleBndr]",["RuleBndr","[]"]),
       ("Pragma.RuleP[3]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Pragma.RuleP[4]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Pragma.RuleP[5]::Phases",["Phases.BeforePhase[1]::Int","Phases.FromPhase[1]::Int"]),
       ("Pragma.SpecialiseInstP[1]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Pragma.SpecialiseP[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Pragma.SpecialiseP[2]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Pragma.SpecialiseP[3]::Maybe Inline",["Maybe","Inline"]),
       ("Pragma.SpecialiseP[4]::Phases",["Phases.BeforePhase[1]::Int","Phases.FromPhase[1]::Int"]),
       ("Range.FromR[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Range.FromThenR[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Range.FromThenR[2]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Range.FromThenToR[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Range.FromThenToR[2]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Range.FromThenToR[3]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Range.FromToR[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Range.FromToR[2]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Ratio",["Ratio.:%[1]::a","Ratio.:%[2]::a"]),
       ("Ratio.:%[1]::a",[]),
       ("Ratio.:%[2]::a",[]),
       ("Role",[]),
       ("RuleBndr",["RuleBndr.RuleVar[1]::Name","RuleBndr.TypedRuleVar[1]::Name","RuleBndr.TypedRuleVar[2]::Type"]),
       ("RuleBndr.RuleVar[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("RuleBndr.TypedRuleVar[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("RuleBndr.TypedRuleVar[2]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Stmt",["Stmt.BindS[1]::Pat","Stmt.BindS[2]::Exp","Stmt.LetS[1]::[Dec]","Stmt.NoBindS[1]::Exp","Stmt.ParS[1]::[[Stmt]]"]),
       ("Stmt.BindS[1]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Stmt.BindS[2]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Stmt.LetS[1]::[Dec]",["Dec","[]"]),
       ("Stmt.NoBindS[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.StaticE[1]::Exp","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Stmt.ParS[1]::[[Stmt]]",["[Stmt]","[]"]),
       ("Strict",[]),
       ("TyLit.NumTyLit[1]::Integer",["Integer.Jn#[1]::BigNat","Integer.Jp#[1]::BigNat","Integer.S#[1]::Int#"]),
       ("TyLit.StrTyLit[1]::[Char] (aka String)",["Char","[]"]),
       ("TySynEqn",["TySynEqn.TySynEqn[1]::[Type]","TySynEqn.TySynEqn[2]::Type"]),
       ("TySynEqn.TySynEqn[1]::[Type]",["Type","[]"]),
       ("TySynEqn.TySynEqn[2]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("TyVarBndr",["TyVarBndr.KindedTV[1]::Name","TyVarBndr.KindedTV[2]::Type (aka Kind)","TyVarBndr.PlainTV[1]::Name"]),
       ("TyVarBndr.KindedTV[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("TyVarBndr.KindedTV[2]::Type (aka Kind)",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("TyVarBndr.PlainTV[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.AppT[1]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.AppT[2]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.ConT[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Type.ForallT[1]::[TyVarBndr]",["TyVarBndr","[]"]),
       ("Type.ForallT[2]::[Type] (aka Cxt)",["Type","[]"]),
       ("Type.ForallT[3]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.LitT[1]::TyLit",["TyLit.NumTyLit[1]::Integer","TyLit.StrTyLit[1]::[Char] (aka String)"]),
       ("Type.PromotedT[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Type.PromotedTupleT[1]::Int",["Int.I#[1]::Int#"]),
       ("Type.SigT[1]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.SigT[2]::Type (aka Kind)",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.TupleT[1]::Int",["Int.I#[1]::Int#"]),
       ("Type.UnboxedTupleT[1]::Int",["Int.I#[1]::Int#"]),
       ("Type.VarT[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Word8",["Word8.W8#[1]::Word#"]),
       ("Word8.W8#[1]::Word#",[]),
       ("[Stmt]",["Stmt","[]"]),
       ("[]",[])
#else
       ("(,)",[]),
       ("(,) Guard",["Guard","(,)"]),
       ("(,) Name",["Name","(,)"]),
       ("(,) Strict",["Strict","(,)"]),
       ("(,,)",[]),
       ("(,,) Name",["Name","(,,)"]),
       ("(,,) Name Strict",["(,,) Name","Strict"]),
       ("(Guard, Exp)",["(,) Guard","Exp"]),
       ("(Name, Exp)",["(,) Name","Exp"]),
       ("(Name, Pat)",["(,) Name","Pat"]),
       ("(Name, Strict, Type)",["(,,) Name Strict","Type"]),
       ("(Strict, Type)",["(,) Strict","Type"]),
       ("AnnTarget.TypeAnnotation[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("AnnTarget.ValueAnnotation[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Body.GuardedB[1]::[(Guard, Exp)]",["(Guard, Exp)","[]"]),
       ("Body.NormalB[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Char",["Char.C#[1]::Char#"]),
       ("Char.C#[1]::Char#",[]),
       ("Clause",["Clause.Clause[1]::[Pat]","Clause.Clause[2]::Body","Clause.Clause[3]::[Dec]"]),
       ("Clause.Clause[1]::[Pat]",["Pat","[]"]),
       ("Clause.Clause[2]::Body",["Body.GuardedB[1]::[(Guard, Exp)]","Body.NormalB[1]::Exp"]),
       ("Clause.Clause[3]::[Dec]",["Dec","[]"]),
       ("Con",["Con.ForallC[1]::[TyVarBndr]","Con.ForallC[2]::[Pred] (aka Cxt)","Con.ForallC[3]::Con","Con.InfixC[1]::(Strict, Type) (aka StrictType)","Con.InfixC[2]::Name","Con.InfixC[3]::(Strict, Type) (aka StrictType)","Con.NormalC[1]::Name","Con.NormalC[2]::[(Strict, Type)]","Con.RecC[1]::Name","Con.RecC[2]::[(Name, Strict, Type)]"]),
       ("Con.ForallC[1]::[TyVarBndr]",["TyVarBndr","[]"]),
       ("Con.ForallC[2]::[Pred] (aka Cxt)",["Pred","[]"]),
       ("Con.ForallC[3]::Con",["Con.ForallC[1]::[TyVarBndr]","Con.ForallC[2]::[Pred] (aka Cxt)","Con.ForallC[3]::Con","Con.InfixC[1]::(Strict, Type) (aka StrictType)","Con.InfixC[2]::Name","Con.InfixC[3]::(Strict, Type) (aka StrictType)","Con.NormalC[1]::Name","Con.NormalC[2]::[(Strict, Type)]","Con.RecC[1]::Name","Con.RecC[2]::[(Name, Strict, Type)]"]),
       ("Con.InfixC[1]::(Strict, Type) (aka StrictType)",["(,) Strict","Type"]),
       ("Con.InfixC[2]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Con.InfixC[3]::(Strict, Type) (aka StrictType)",["(,) Strict","Type"]),
       ("Con.NormalC[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Con.NormalC[2]::[(Strict, Type)]",["(Strict, Type)","[]"]),
       ("Con.RecC[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Con.RecC[2]::[(Name, Strict, Type)]",["(Name, Strict, Type)","[]"]),
       ("Dec",["Dec.ClassD[1]::[Pred] (aka Cxt)","Dec.ClassD[2]::Name","Dec.ClassD[3]::[TyVarBndr]","Dec.ClassD[4]::[FunDep]","Dec.ClassD[5]::[Dec]","Dec.ClosedTypeFamilyD[1]::Name","Dec.ClosedTypeFamilyD[2]::[TyVarBndr]","Dec.ClosedTypeFamilyD[3]::Maybe Type","Dec.ClosedTypeFamilyD[4]::[TySynEqn]","Dec.DataD[1]::[Pred] (aka Cxt)","Dec.DataD[2]::Name","Dec.DataD[3]::[TyVarBndr]","Dec.DataD[4]::[Con]","Dec.DataD[5]::[Name]","Dec.DataInstD[1]::[Pred] (aka Cxt)","Dec.DataInstD[2]::Name","Dec.DataInstD[3]::[Type]","Dec.DataInstD[4]::[Con]","Dec.DataInstD[5]::[Name]","Dec.FamilyD[1]::FamFlavour","Dec.FamilyD[2]::Name","Dec.FamilyD[3]::[TyVarBndr]","Dec.FamilyD[4]::Maybe Type","Dec.ForeignD[1]::Foreign","Dec.FunD[1]::Name","Dec.FunD[2]::[Clause]","Dec.InfixD[1]::Fixity","Dec.InfixD[2]::Name","Dec.InstanceD[1]::[Pred] (aka Cxt)","Dec.InstanceD[2]::Type","Dec.InstanceD[3]::[Dec]","Dec.NewtypeD[1]::[Pred] (aka Cxt)","Dec.NewtypeD[2]::Name","Dec.NewtypeD[3]::[TyVarBndr]","Dec.NewtypeD[4]::Con","Dec.NewtypeD[5]::[Name]","Dec.NewtypeInstD[1]::[Pred] (aka Cxt)","Dec.NewtypeInstD[2]::Name","Dec.NewtypeInstD[3]::[Type]","Dec.NewtypeInstD[4]::Con","Dec.NewtypeInstD[5]::[Name]","Dec.PragmaD[1]::Pragma","Dec.RoleAnnotD[1]::Name","Dec.RoleAnnotD[2]::[Role]","Dec.SigD[1]::Name","Dec.SigD[2]::Type","Dec.TySynD[1]::Name","Dec.TySynD[2]::[TyVarBndr]","Dec.TySynD[3]::Type","Dec.TySynInstD[1]::Name","Dec.TySynInstD[2]::TySynEqn","Dec.ValD[1]::Pat","Dec.ValD[2]::Body","Dec.ValD[3]::[Dec]"]),
       ("Dec.ClassD[1]::[Pred] (aka Cxt)",["Pred","[]"]),
       ("Dec.ClassD[2]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.ClassD[3]::[TyVarBndr]",["TyVarBndr","[]"]),
       ("Dec.ClassD[4]::[FunDep]",["FunDep","[]"]),
       ("Dec.ClassD[5]::[Dec]",["Dec","[]"]),
       ("Dec.ClosedTypeFamilyD[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.ClosedTypeFamilyD[2]::[TyVarBndr]",["TyVarBndr","[]"]),
       ("Dec.ClosedTypeFamilyD[3]::Maybe Type",["Maybe","Type"]),
       ("Dec.ClosedTypeFamilyD[4]::[TySynEqn]",["TySynEqn","[]"]),
       ("Dec.DataD[1]::[Pred] (aka Cxt)",["Pred","[]"]),
       ("Dec.DataD[2]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.DataD[3]::[TyVarBndr]",["TyVarBndr","[]"]),
       ("Dec.DataD[4]::[Con]",["Con","[]"]),
       ("Dec.DataD[5]::[Name]",["Name","[]"]),
       ("Dec.DataInstD[1]::[Pred] (aka Cxt)",["Pred","[]"]),
       ("Dec.DataInstD[2]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.DataInstD[3]::[Type]",["Type","[]"]),
       ("Dec.DataInstD[4]::[Con]",["Con","[]"]),
       ("Dec.DataInstD[5]::[Name]",["Name","[]"]),
       ("Dec.FamilyD[1]::FamFlavour",[]),
       ("Dec.FamilyD[2]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.FamilyD[3]::[TyVarBndr]",["TyVarBndr","[]"]),
       ("Dec.FamilyD[4]::Maybe Type",["Maybe","Type"]),
       ("Dec.ForeignD[1]::Foreign",["Foreign.ExportF[1]::Callconv","Foreign.ExportF[2]::[Char] (aka String)","Foreign.ExportF[3]::Name","Foreign.ExportF[4]::Type","Foreign.ImportF[1]::Callconv","Foreign.ImportF[2]::Safety","Foreign.ImportF[3]::[Char] (aka String)","Foreign.ImportF[4]::Name","Foreign.ImportF[5]::Type"]),
       ("Dec.FunD[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.FunD[2]::[Clause]",["Clause","[]"]),
       ("Dec.InfixD[1]::Fixity",["Fixity.Fixity[1]::Int","Fixity.Fixity[2]::FixityDirection"]),
       ("Dec.InfixD[2]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.InstanceD[1]::[Pred] (aka Cxt)",["Pred","[]"]),
       ("Dec.InstanceD[2]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Dec.InstanceD[3]::[Dec]",["Dec","[]"]),
       ("Dec.NewtypeD[1]::[Pred] (aka Cxt)",["Pred","[]"]),
       ("Dec.NewtypeD[2]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.NewtypeD[3]::[TyVarBndr]",["TyVarBndr","[]"]),
       ("Dec.NewtypeD[4]::Con",["Con.ForallC[1]::[TyVarBndr]","Con.ForallC[2]::[Pred] (aka Cxt)","Con.ForallC[3]::Con","Con.InfixC[1]::(Strict, Type) (aka StrictType)","Con.InfixC[2]::Name","Con.InfixC[3]::(Strict, Type) (aka StrictType)","Con.NormalC[1]::Name","Con.NormalC[2]::[(Strict, Type)]","Con.RecC[1]::Name","Con.RecC[2]::[(Name, Strict, Type)]"]),
       ("Dec.NewtypeD[5]::[Name]",["Name","[]"]),
       ("Dec.NewtypeInstD[1]::[Pred] (aka Cxt)",["Pred","[]"]),
       ("Dec.NewtypeInstD[2]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.NewtypeInstD[3]::[Type]",["Type","[]"]),
       ("Dec.NewtypeInstD[4]::Con",["Con.ForallC[1]::[TyVarBndr]","Con.ForallC[2]::[Pred] (aka Cxt)","Con.ForallC[3]::Con","Con.InfixC[1]::(Strict, Type) (aka StrictType)","Con.InfixC[2]::Name","Con.InfixC[3]::(Strict, Type) (aka StrictType)","Con.NormalC[1]::Name","Con.NormalC[2]::[(Strict, Type)]","Con.RecC[1]::Name","Con.RecC[2]::[(Name, Strict, Type)]"]),
       ("Dec.NewtypeInstD[5]::[Name]",["Name","[]"]),
       ("Dec.PragmaD[1]::Pragma",["Pragma.AnnP[1]::AnnTarget","Pragma.AnnP[2]::Exp","Pragma.InlineP[1]::Name","Pragma.InlineP[2]::Inline","Pragma.InlineP[3]::RuleMatch","Pragma.InlineP[4]::Phases","Pragma.RuleP[1]::[Char] (aka String)","Pragma.RuleP[2]::[RuleBndr]","Pragma.RuleP[3]::Exp","Pragma.RuleP[4]::Exp","Pragma.RuleP[5]::Phases","Pragma.SpecialiseInstP[1]::Type","Pragma.SpecialiseP[1]::Name","Pragma.SpecialiseP[2]::Type","Pragma.SpecialiseP[3]::Maybe Inline","Pragma.SpecialiseP[4]::Phases"]),
       ("Dec.RoleAnnotD[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.RoleAnnotD[2]::[Role]",["Role","[]"]),
       ("Dec.SigD[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.SigD[2]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Dec.TySynD[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.TySynD[2]::[TyVarBndr]",["TyVarBndr","[]"]),
       ("Dec.TySynD[3]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Dec.TySynInstD[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Dec.TySynInstD[2]::TySynEqn",["TySynEqn.TySynEqn[1]::[Type]","TySynEqn.TySynEqn[2]::Type"]),
       ("Dec.ValD[1]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Dec.ValD[2]::Body",["Body.GuardedB[1]::[(Guard, Exp)]","Body.NormalB[1]::Exp"]),
       ("Dec.ValD[3]::[Dec]",["Dec","[]"]),
       ("Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.AppE[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.AppE[2]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.ArithSeqE[1]::Range",["Range.FromR[1]::Exp","Range.FromThenR[1]::Exp","Range.FromThenR[2]::Exp","Range.FromThenToR[1]::Exp","Range.FromThenToR[2]::Exp","Range.FromThenToR[3]::Exp","Range.FromToR[1]::Exp","Range.FromToR[2]::Exp"]),
       ("Exp.CaseE[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.CaseE[2]::[Match]",["Match","[]"]),
       ("Exp.CompE[1]::[Stmt]",["Stmt","[]"]),
       ("Exp.ConE[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Exp.CondE[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.CondE[2]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.CondE[3]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.DoE[1]::[Stmt]",["Stmt","[]"]),
       ("Exp.InfixE[1]::Maybe Exp",["Maybe","Exp"]),
       ("Exp.InfixE[2]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.InfixE[3]::Maybe Exp",["Maybe","Exp"]),
       ("Exp.LamCaseE[1]::[Match]",["Match","[]"]),
       ("Exp.LamE[1]::[Pat]",["Pat","[]"]),
       ("Exp.LamE[2]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.LetE[1]::[Dec]",["Dec","[]"]),
       ("Exp.LetE[2]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.ListE[1]::[Exp]",["Exp","[]"]),
       ("Exp.LitE[1]::Lit",["Lit.CharL[1]::Char","Lit.DoublePrimL[1]::Ratio Integer (aka Rational)","Lit.FloatPrimL[1]::Ratio Integer (aka Rational)","Lit.IntPrimL[1]::Integer","Lit.IntegerL[1]::Integer","Lit.RationalL[1]::Ratio Integer (aka Rational)","Lit.StringL[1]::[Char] (aka String)","Lit.StringPrimL[1]::[Word8]","Lit.WordPrimL[1]::Integer"]),
       ("Exp.MultiIfE[1]::[(Guard, Exp)]",["(Guard, Exp)","[]"]),
       ("Exp.ParensE[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.RecConE[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Exp.RecConE[2]::[(Name, Exp)]",["(Name, Exp)","[]"]),
       ("Exp.RecUpdE[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.RecUpdE[2]::[(Name, Exp)]",["(Name, Exp)","[]"]),
       ("Exp.SigE[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.SigE[2]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Exp.TupE[1]::[Exp]",["Exp","[]"]),
       ("Exp.UInfixE[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.UInfixE[2]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.UInfixE[3]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Exp.UnboxedTupE[1]::[Exp]",["Exp","[]"]),
       ("Exp.VarE[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Fixity.Fixity[1]::Int",["Int.I#[1]::Int#"]),
       ("Fixity.Fixity[2]::FixityDirection",[]),
       ("Foreign.ExportF[1]::Callconv",[]),
       ("Foreign.ExportF[2]::[Char] (aka String)",["Char","[]"]),
       ("Foreign.ExportF[3]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Foreign.ExportF[4]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Foreign.ImportF[1]::Callconv",[]),
       ("Foreign.ImportF[2]::Safety",[]),
       ("Foreign.ImportF[3]::[Char] (aka String)",["Char","[]"]),
       ("Foreign.ImportF[4]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Foreign.ImportF[5]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("FunDep",["FunDep.FunDep[1]::[Name]","FunDep.FunDep[2]::[Name]"]),
       ("FunDep.FunDep[1]::[Name]",["Name","[]"]),
       ("FunDep.FunDep[2]::[Name]",["Name","[]"]),
       ("Guard",["Guard.NormalG[1]::Exp","Guard.PatG[1]::[Stmt]"]),
       ("Guard.NormalG[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Guard.PatG[1]::[Stmt]",["Stmt","[]"]),
       ("Inline",[]),
       ("Int.I#[1]::Int#",[]),
       ("Integer",["Integer.J#[1]::Int#","Integer.J#[2]::ByteArray#","Integer.S#[1]::Int#"]),
       ("Integer.J#[1]::Int#",[]),
       ("Integer.J#[2]::ByteArray#",[]),
       ("Integer.S#[1]::Int#",[]),
       ("Lit.CharL[1]::Char",["Char.C#[1]::Char#"]),
       ("Lit.DoublePrimL[1]::Ratio Integer (aka Rational)",["Ratio","Integer"]),
       ("Lit.FloatPrimL[1]::Ratio Integer (aka Rational)",["Ratio","Integer"]),
       ("Lit.IntPrimL[1]::Integer",["Integer.J#[1]::Int#","Integer.J#[2]::ByteArray#","Integer.S#[1]::Int#"]),
       ("Lit.IntegerL[1]::Integer",["Integer.J#[1]::Int#","Integer.J#[2]::ByteArray#","Integer.S#[1]::Int#"]),
       ("Lit.RationalL[1]::Ratio Integer (aka Rational)",["Ratio","Integer"]),
       ("Lit.StringL[1]::[Char] (aka String)",["Char","[]"]),
       ("Lit.StringPrimL[1]::[Word8]",["Word8","[]"]),
       ("Lit.WordPrimL[1]::Integer",["Integer.J#[1]::Int#","Integer.J#[2]::ByteArray#","Integer.S#[1]::Int#"]),
       ("Match",["Match.Match[1]::Pat","Match.Match[2]::Body","Match.Match[3]::[Dec]"]),
       ("Match.Match[1]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Match.Match[2]::Body",["Body.GuardedB[1]::[(Guard, Exp)]","Body.NormalB[1]::Exp"]),
       ("Match.Match[3]::[Dec]",["Dec","[]"]),
       ("Maybe",["Maybe.Just[1]::a"]),
       ("Maybe.Just[1]::a",[]),
       ("ModName.ModName[1]::[Char] (aka String)",["Char","[]"]),
       ("Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Name.Name[1]::OccName",["OccName.OccName[1]::[Char] (aka String)"]),
       ("Name.Name[2]::NameFlavour",["NameFlavour.NameG[1]::NameSpace","NameFlavour.NameG[2]::PkgName","NameFlavour.NameG[3]::ModName","NameFlavour.NameL[1]::Int#","NameFlavour.NameQ[1]::ModName","NameFlavour.NameU[1]::Int#"]),
       ("NameFlavour.NameG[1]::NameSpace",[]),
       ("NameFlavour.NameG[2]::PkgName",["PkgName.PkgName[1]::[Char] (aka String)"]),
       ("NameFlavour.NameG[3]::ModName",["ModName.ModName[1]::[Char] (aka String)"]),
       ("NameFlavour.NameL[1]::Int#",[]),
       ("NameFlavour.NameQ[1]::ModName",["ModName.ModName[1]::[Char] (aka String)"]),
       ("NameFlavour.NameU[1]::Int#",[]),
       ("OccName.OccName[1]::[Char] (aka String)",["Char","[]"]),
       ("Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Pat.AsP[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Pat.AsP[2]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Pat.BangP[1]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Pat.ConP[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Pat.ConP[2]::[Pat]",["Pat","[]"]),
       ("Pat.InfixP[1]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Pat.InfixP[2]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Pat.InfixP[3]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Pat.ListP[1]::[Pat]",["Pat","[]"]),
       ("Pat.LitP[1]::Lit",["Lit.CharL[1]::Char","Lit.DoublePrimL[1]::Ratio Integer (aka Rational)","Lit.FloatPrimL[1]::Ratio Integer (aka Rational)","Lit.IntPrimL[1]::Integer","Lit.IntegerL[1]::Integer","Lit.RationalL[1]::Ratio Integer (aka Rational)","Lit.StringL[1]::[Char] (aka String)","Lit.StringPrimL[1]::[Word8]","Lit.WordPrimL[1]::Integer"]),
       ("Pat.ParensP[1]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Pat.RecP[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Pat.RecP[2]::[(Name, Pat)]",["(Name, Pat)","[]"]),
       ("Pat.SigP[1]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Pat.SigP[2]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Pat.TildeP[1]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Pat.TupP[1]::[Pat]",["Pat","[]"]),
       ("Pat.UInfixP[1]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Pat.UInfixP[2]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Pat.UInfixP[3]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Pat.UnboxedTupP[1]::[Pat]",["Pat","[]"]),
       ("Pat.VarP[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Pat.ViewP[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Pat.ViewP[2]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Phases.BeforePhase[1]::Int",["Int.I#[1]::Int#"]),
       ("Phases.FromPhase[1]::Int",["Int.I#[1]::Int#"]),
       ("PkgName.PkgName[1]::[Char] (aka String)",["Char","[]"]),
       ("Pragma.AnnP[1]::AnnTarget",["AnnTarget.TypeAnnotation[1]::Name","AnnTarget.ValueAnnotation[1]::Name"]),
       ("Pragma.AnnP[2]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Pragma.InlineP[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Pragma.InlineP[2]::Inline",[]),
       ("Pragma.InlineP[3]::RuleMatch",[]),
       ("Pragma.InlineP[4]::Phases",["Phases.BeforePhase[1]::Int","Phases.FromPhase[1]::Int"]),
       ("Pragma.RuleP[1]::[Char] (aka String)",["Char","[]"]),
       ("Pragma.RuleP[2]::[RuleBndr]",["RuleBndr","[]"]),
       ("Pragma.RuleP[3]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Pragma.RuleP[4]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Pragma.RuleP[5]::Phases",["Phases.BeforePhase[1]::Int","Phases.FromPhase[1]::Int"]),
       ("Pragma.SpecialiseInstP[1]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Pragma.SpecialiseP[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Pragma.SpecialiseP[2]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Pragma.SpecialiseP[3]::Maybe Inline",["Maybe","Inline"]),
       ("Pragma.SpecialiseP[4]::Phases",["Phases.BeforePhase[1]::Int","Phases.FromPhase[1]::Int"]),
       ("Pred",["Pred.ClassP[1]::Name","Pred.ClassP[2]::[Type]","Pred.EqualP[1]::Type","Pred.EqualP[2]::Type"]),
       ("Pred.ClassP[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Pred.ClassP[2]::[Type]",["Type","[]"]),
       ("Pred.EqualP[1]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Pred.EqualP[2]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Range.FromR[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Range.FromThenR[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Range.FromThenR[2]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Range.FromThenToR[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Range.FromThenToR[2]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Range.FromThenToR[3]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Range.FromToR[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Range.FromToR[2]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Ratio",["Ratio.:%[1]::a","Ratio.:%[2]::a"]),
       ("Ratio.:%[1]::a",[]),
       ("Ratio.:%[2]::a",[]),
       ("Role",[]),
       ("RuleBndr",["RuleBndr.RuleVar[1]::Name","RuleBndr.TypedRuleVar[1]::Name","RuleBndr.TypedRuleVar[2]::Type"]),
       ("RuleBndr.RuleVar[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("RuleBndr.TypedRuleVar[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("RuleBndr.TypedRuleVar[2]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Stmt",["Stmt.BindS[1]::Pat","Stmt.BindS[2]::Exp","Stmt.LetS[1]::[Dec]","Stmt.NoBindS[1]::Exp","Stmt.ParS[1]::[[Stmt]]"]),
       ("Stmt.BindS[1]::Pat",["Pat.AsP[1]::Name","Pat.AsP[2]::Pat","Pat.BangP[1]::Pat","Pat.ConP[1]::Name","Pat.ConP[2]::[Pat]","Pat.InfixP[1]::Pat","Pat.InfixP[2]::Name","Pat.InfixP[3]::Pat","Pat.ListP[1]::[Pat]","Pat.LitP[1]::Lit","Pat.ParensP[1]::Pat","Pat.RecP[1]::Name","Pat.RecP[2]::[(Name, Pat)]","Pat.SigP[1]::Pat","Pat.SigP[2]::Type","Pat.TildeP[1]::Pat","Pat.TupP[1]::[Pat]","Pat.UInfixP[1]::Pat","Pat.UInfixP[2]::Name","Pat.UInfixP[3]::Pat","Pat.UnboxedTupP[1]::[Pat]","Pat.VarP[1]::Name","Pat.ViewP[1]::Exp","Pat.ViewP[2]::Pat"]),
       ("Stmt.BindS[2]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Stmt.LetS[1]::[Dec]",["Dec","[]"]),
       ("Stmt.NoBindS[1]::Exp",["Exp.AppE[1]::Exp","Exp.AppE[2]::Exp","Exp.ArithSeqE[1]::Range","Exp.CaseE[1]::Exp","Exp.CaseE[2]::[Match]","Exp.CompE[1]::[Stmt]","Exp.ConE[1]::Name","Exp.CondE[1]::Exp","Exp.CondE[2]::Exp","Exp.CondE[3]::Exp","Exp.DoE[1]::[Stmt]","Exp.InfixE[1]::Maybe Exp","Exp.InfixE[2]::Exp","Exp.InfixE[3]::Maybe Exp","Exp.LamCaseE[1]::[Match]","Exp.LamE[1]::[Pat]","Exp.LamE[2]::Exp","Exp.LetE[1]::[Dec]","Exp.LetE[2]::Exp","Exp.ListE[1]::[Exp]","Exp.LitE[1]::Lit","Exp.MultiIfE[1]::[(Guard, Exp)]","Exp.ParensE[1]::Exp","Exp.RecConE[1]::Name","Exp.RecConE[2]::[(Name, Exp)]","Exp.RecUpdE[1]::Exp","Exp.RecUpdE[2]::[(Name, Exp)]","Exp.SigE[1]::Exp","Exp.SigE[2]::Type","Exp.TupE[1]::[Exp]","Exp.UInfixE[1]::Exp","Exp.UInfixE[2]::Exp","Exp.UInfixE[3]::Exp","Exp.UnboxedTupE[1]::[Exp]","Exp.VarE[1]::Name"]),
       ("Stmt.ParS[1]::[[Stmt]]",["[Stmt]","[]"]),
       ("Strict",[]),
       ("TyLit.NumTyLit[1]::Integer",["Integer.J#[1]::Int#","Integer.J#[2]::ByteArray#","Integer.S#[1]::Int#"]),
       ("TyLit.StrTyLit[1]::[Char] (aka String)",["Char","[]"]),
       ("TySynEqn",["TySynEqn.TySynEqn[1]::[Type]","TySynEqn.TySynEqn[2]::Type"]),
       ("TySynEqn.TySynEqn[1]::[Type]",["Type","[]"]),
       ("TySynEqn.TySynEqn[2]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("TyVarBndr",["TyVarBndr.KindedTV[1]::Name","TyVarBndr.KindedTV[2]::Type (aka Kind)","TyVarBndr.PlainTV[1]::Name"]),
       ("TyVarBndr.KindedTV[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("TyVarBndr.KindedTV[2]::Type (aka Kind)",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("TyVarBndr.PlainTV[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.AppT[1]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.AppT[2]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.ConT[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Type.ForallT[1]::[TyVarBndr]",["TyVarBndr","[]"]),
       ("Type.ForallT[2]::[Pred] (aka Cxt)",["Pred","[]"]),
       ("Type.ForallT[3]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.LitT[1]::TyLit",["TyLit.NumTyLit[1]::Integer","TyLit.StrTyLit[1]::[Char] (aka String)"]),
       ("Type.PromotedT[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Type.PromotedTupleT[1]::Int",["Int.I#[1]::Int#"]),
       ("Type.SigT[1]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.SigT[2]::Type (aka Kind)",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.TupleT[1]::Int",["Int.I#[1]::Int#"]),
       ("Type.UnboxedTupleT[1]::Int",["Int.I#[1]::Int#"]),
       ("Type.VarT[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Word8",["Word8.W8#[1]::Word#"]),
       ("Word8.W8#[1]::Word#",[]),
       ("[Stmt]",["Stmt","[]"]),
       ("[]",[])
#endif
      ]

typeEdges :: Set (String, [String])
typeEdges =
    fromList
      [
#if MIN_VERSION_template_haskell(2,10,0)
       ("BigNat.BN#[1]::ByteArray#",[]),
       ("Char",["Char.C#[1]::Char#"]),
       ("Char.C#[1]::Char#",[]),
       ("Int.I#[1]::Int#",[]),
       ("Integer.Jn#[1]::BigNat",["BigNat.BN#[1]::ByteArray#"]),
       ("Integer.Jp#[1]::BigNat",["BigNat.BN#[1]::ByteArray#"]),
       ("Integer.S#[1]::Int#",[]),
       ("ModName.ModName[1]::[Char] (aka String)",["Char","[]"]),
       ("Name.Name[1]::OccName",["OccName.OccName[1]::[Char] (aka String)"]),
       ("Name.Name[2]::NameFlavour",["NameFlavour.NameG[1]::NameSpace","NameFlavour.NameG[2]::PkgName","NameFlavour.NameG[3]::ModName","NameFlavour.NameL[1]::Int","NameFlavour.NameQ[1]::ModName","NameFlavour.NameU[1]::Int"]),
       ("NameFlavour.NameG[1]::NameSpace",[]),
       ("NameFlavour.NameG[2]::PkgName",["PkgName.PkgName[1]::[Char] (aka String)"]),
       ("NameFlavour.NameG[3]::ModName",["ModName.ModName[1]::[Char] (aka String)"]),
       ("NameFlavour.NameL[1]::Int",["Int.I#[1]::Int#"]),
       ("NameFlavour.NameQ[1]::ModName",["ModName.ModName[1]::[Char] (aka String)"]),
       ("NameFlavour.NameU[1]::Int",["Int.I#[1]::Int#"]),
       ("OccName.OccName[1]::[Char] (aka String)",["Char","[]"]),
       ("PkgName.PkgName[1]::[Char] (aka String)",["Char","[]"]),
       ("TyLit.NumTyLit[1]::Integer",["Integer.Jn#[1]::BigNat","Integer.Jp#[1]::BigNat","Integer.S#[1]::Int#"]),
       ("TyLit.StrTyLit[1]::[Char] (aka String)",["Char","[]"]),
       ("TyVarBndr",["TyVarBndr.KindedTV[1]::Name","TyVarBndr.KindedTV[2]::Type (aka Kind)","TyVarBndr.PlainTV[1]::Name"]),
       ("TyVarBndr.KindedTV[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("TyVarBndr.KindedTV[2]::Type (aka Kind)",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("TyVarBndr.PlainTV[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.AppT[1]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.AppT[2]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.ConT[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Type.ForallT[1]::[TyVarBndr]",["TyVarBndr","[]"]),
       ("Type.ForallT[2]::[Type] (aka Cxt)",["Type","[]"]),
       ("Type.ForallT[3]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.LitT[1]::TyLit",["TyLit.NumTyLit[1]::Integer","TyLit.StrTyLit[1]::[Char] (aka String)"]),
       ("Type.PromotedT[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Type.PromotedTupleT[1]::Int",["Int.I#[1]::Int#"]),
       ("Type.SigT[1]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.SigT[2]::Type (aka Kind)",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Type] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.TupleT[1]::Int",["Int.I#[1]::Int#"]),
       ("Type.UnboxedTupleT[1]::Int",["Int.I#[1]::Int#"]),
       ("Type.VarT[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("[]",[])
#else
       ("Char",["Char.C#[1]::Char#"]),
       ("Char.C#[1]::Char#",[]),
       ("Int.I#[1]::Int#",[]),
       ("Integer.J#[1]::Int#",[]),
       ("Integer.J#[2]::ByteArray#",[]),
       ("Integer.S#[1]::Int#",[]),
       ("ModName.ModName[1]::[Char] (aka String)",["Char","[]"]),
       ("Name.Name[1]::OccName",["OccName.OccName[1]::[Char] (aka String)"]),
       ("Name.Name[2]::NameFlavour",["NameFlavour.NameG[1]::NameSpace","NameFlavour.NameG[2]::PkgName","NameFlavour.NameG[3]::ModName","NameFlavour.NameL[1]::Int#","NameFlavour.NameQ[1]::ModName","NameFlavour.NameU[1]::Int#"]),
       ("NameFlavour.NameG[1]::NameSpace",[]),
       ("NameFlavour.NameG[2]::PkgName",["PkgName.PkgName[1]::[Char] (aka String)"]),
       ("NameFlavour.NameG[3]::ModName",["ModName.ModName[1]::[Char] (aka String)"]),
       ("NameFlavour.NameL[1]::Int#",[]),
       ("NameFlavour.NameQ[1]::ModName",["ModName.ModName[1]::[Char] (aka String)"]),
       ("NameFlavour.NameU[1]::Int#",[]),
       ("OccName.OccName[1]::[Char] (aka String)",["Char","[]"]),
       ("PkgName.PkgName[1]::[Char] (aka String)",["Char","[]"]),
       ("Pred",["Pred.ClassP[1]::Name","Pred.ClassP[2]::[Type]","Pred.EqualP[1]::Type","Pred.EqualP[2]::Type"]),
       ("Pred.ClassP[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Pred.ClassP[2]::[Type]",["Type","[]"]),
       ("Pred.EqualP[1]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Pred.EqualP[2]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("TyLit.NumTyLit[1]::Integer",["Integer.J#[1]::Int#","Integer.J#[2]::ByteArray#","Integer.S#[1]::Int#"]),
       ("TyLit.StrTyLit[1]::[Char] (aka String)",["Char","[]"]),
       ("TyVarBndr",["TyVarBndr.KindedTV[1]::Name","TyVarBndr.KindedTV[2]::Type (aka Kind)","TyVarBndr.PlainTV[1]::Name"]),
       ("TyVarBndr.KindedTV[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("TyVarBndr.KindedTV[2]::Type (aka Kind)",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("TyVarBndr.PlainTV[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.AppT[1]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.AppT[2]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.ConT[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Type.ForallT[1]::[TyVarBndr]",["TyVarBndr","[]"]),
       ("Type.ForallT[2]::[Pred] (aka Cxt)",["Pred","[]"]),
       ("Type.ForallT[3]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.LitT[1]::TyLit",["TyLit.NumTyLit[1]::Integer","TyLit.StrTyLit[1]::[Char] (aka String)"]),
       ("Type.PromotedT[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("Type.PromotedTupleT[1]::Int",["Int.I#[1]::Int#"]),
       ("Type.SigT[1]::Type",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.SigT[2]::Type (aka Kind)",["Type.AppT[1]::Type","Type.AppT[2]::Type","Type.ConT[1]::Name","Type.ForallT[1]::[TyVarBndr]","Type.ForallT[2]::[Pred] (aka Cxt)","Type.ForallT[3]::Type","Type.LitT[1]::TyLit","Type.PromotedT[1]::Name","Type.PromotedTupleT[1]::Int","Type.SigT[1]::Type","Type.SigT[2]::Type (aka Kind)","Type.TupleT[1]::Int","Type.UnboxedTupleT[1]::Int","Type.VarT[1]::Name"]),
       ("Type.TupleT[1]::Int",["Int.I#[1]::Int#"]),
       ("Type.UnboxedTupleT[1]::Int",["Int.I#[1]::Int#"]),
       ("Type.VarT[1]::Name",["Name.Name[1]::OccName","Name.Name[2]::NameFlavour"]),
       ("[]",[])
#endif
    ]

arity0SubtypesOfDec :: Set String
arity0SubtypesOfDec =
    fromList
      [
#if MIN_VERSION_template_haskell(2,10,0)
       "(Guard, Exp)",
       "(Name, Exp)",
       "(Name, Pat)",
       "(Name, Strict, Type)",
       "(Strict, Type)",
       "AnnTarget.TypeAnnotation[1]::Name",
       "AnnTarget.ValueAnnotation[1]::Name",
       "BigNat.BN#[1]::ByteArray#",
       "Body.GuardedB[1]::[(Guard, Exp)]",
       "Body.NormalB[1]::Exp",
       "Char",
       "Char.C#[1]::Char#",
       "Clause",
       "Clause.Clause[1]::[Pat]",
       "Clause.Clause[2]::Body",
       "Clause.Clause[3]::[Dec]",
       "Con",
       "Con.ForallC[1]::[TyVarBndr]",
       "Con.ForallC[2]::[Type] (aka Cxt)",
       "Con.ForallC[3]::Con",
       "Con.InfixC[1]::(Strict, Type) (aka StrictType)",
       "Con.InfixC[2]::Name",
       "Con.InfixC[3]::(Strict, Type) (aka StrictType)",
       "Con.NormalC[1]::Name",
       "Con.NormalC[2]::[(Strict, Type)]",
       "Con.RecC[1]::Name",
       "Con.RecC[2]::[(Name, Strict, Type)]",
       "Dec",
       "Dec.ClassD[1]::[Type] (aka Cxt)",
       "Dec.ClassD[2]::Name",
       "Dec.ClassD[3]::[TyVarBndr]",
       "Dec.ClassD[4]::[FunDep]",
       "Dec.ClassD[5]::[Dec]",
       "Dec.ClosedTypeFamilyD[1]::Name",
       "Dec.ClosedTypeFamilyD[2]::[TyVarBndr]",
       "Dec.ClosedTypeFamilyD[3]::Maybe Type",
       "Dec.ClosedTypeFamilyD[4]::[TySynEqn]",
       "Dec.DataD[1]::[Type] (aka Cxt)",
       "Dec.DataD[2]::Name",
       "Dec.DataD[3]::[TyVarBndr]",
       "Dec.DataD[4]::[Con]",
       "Dec.DataD[5]::[Name]",
       "Dec.DataInstD[1]::[Type] (aka Cxt)",
       "Dec.DataInstD[2]::Name",
       "Dec.DataInstD[3]::[Type]",
       "Dec.DataInstD[4]::[Con]",
       "Dec.DataInstD[5]::[Name]",
       "Dec.DefaultSigD[1]::Name",
       "Dec.DefaultSigD[2]::Type",
       "Dec.FamilyD[1]::FamFlavour",
       "Dec.FamilyD[2]::Name",
       "Dec.FamilyD[3]::[TyVarBndr]",
       "Dec.FamilyD[4]::Maybe Type",
       "Dec.ForeignD[1]::Foreign",
       "Dec.FunD[1]::Name",
       "Dec.FunD[2]::[Clause]",
       "Dec.InfixD[1]::Fixity",
       "Dec.InfixD[2]::Name",
       "Dec.InstanceD[1]::[Type] (aka Cxt)",
       "Dec.InstanceD[2]::Type",
       "Dec.InstanceD[3]::[Dec]",
       "Dec.NewtypeD[1]::[Type] (aka Cxt)",
       "Dec.NewtypeD[2]::Name",
       "Dec.NewtypeD[3]::[TyVarBndr]",
       "Dec.NewtypeD[4]::Con",
       "Dec.NewtypeD[5]::[Name]",
       "Dec.NewtypeInstD[1]::[Type] (aka Cxt)",
       "Dec.NewtypeInstD[2]::Name",
       "Dec.NewtypeInstD[3]::[Type]",
       "Dec.NewtypeInstD[4]::Con",
       "Dec.NewtypeInstD[5]::[Name]",
       "Dec.PragmaD[1]::Pragma",
       "Dec.RoleAnnotD[1]::Name",
       "Dec.RoleAnnotD[2]::[Role]",
       "Dec.SigD[1]::Name",
       "Dec.SigD[2]::Type",
       "Dec.StandaloneDerivD[1]::[Type] (aka Cxt)",
       "Dec.StandaloneDerivD[2]::Type",
       "Dec.TySynD[1]::Name",
       "Dec.TySynD[2]::[TyVarBndr]",
       "Dec.TySynD[3]::Type",
       "Dec.TySynInstD[1]::Name",
       "Dec.TySynInstD[2]::TySynEqn",
       "Dec.ValD[1]::Pat",
       "Dec.ValD[2]::Body",
       "Dec.ValD[3]::[Dec]",
       "Exp",
       "Exp.AppE[1]::Exp",
       "Exp.AppE[2]::Exp",
       "Exp.ArithSeqE[1]::Range",
       "Exp.CaseE[1]::Exp",
       "Exp.CaseE[2]::[Match]",
       "Exp.CompE[1]::[Stmt]",
       "Exp.ConE[1]::Name",
       "Exp.CondE[1]::Exp",
       "Exp.CondE[2]::Exp",
       "Exp.CondE[3]::Exp",
       "Exp.DoE[1]::[Stmt]",
       "Exp.InfixE[1]::Maybe Exp",
       "Exp.InfixE[2]::Exp",
       "Exp.InfixE[3]::Maybe Exp",
       "Exp.LamCaseE[1]::[Match]",
       "Exp.LamE[1]::[Pat]",
       "Exp.LamE[2]::Exp",
       "Exp.LetE[1]::[Dec]",
       "Exp.LetE[2]::Exp",
       "Exp.ListE[1]::[Exp]",
       "Exp.LitE[1]::Lit",
       "Exp.MultiIfE[1]::[(Guard, Exp)]",
       "Exp.ParensE[1]::Exp",
       "Exp.RecConE[1]::Name",
       "Exp.RecConE[2]::[(Name, Exp)]",
       "Exp.RecUpdE[1]::Exp",
       "Exp.RecUpdE[2]::[(Name, Exp)]",
       "Exp.SigE[1]::Exp",
       "Exp.SigE[2]::Type",
       "Exp.StaticE[1]::Exp",
       "Exp.TupE[1]::[Exp]",
       "Exp.UInfixE[1]::Exp",
       "Exp.UInfixE[2]::Exp",
       "Exp.UInfixE[3]::Exp",
       "Exp.UnboxedTupE[1]::[Exp]",
       "Exp.VarE[1]::Name",
       "Fixity.Fixity[1]::Int",
       "Fixity.Fixity[2]::FixityDirection",
       "Foreign.ExportF[1]::Callconv",
       "Foreign.ExportF[2]::[Char] (aka String)",
       "Foreign.ExportF[3]::Name",
       "Foreign.ExportF[4]::Type",
       "Foreign.ImportF[1]::Callconv",
       "Foreign.ImportF[2]::Safety",
       "Foreign.ImportF[3]::[Char] (aka String)",
       "Foreign.ImportF[4]::Name",
       "Foreign.ImportF[5]::Type",
       "FunDep",
       "FunDep.FunDep[1]::[Name]",
       "FunDep.FunDep[2]::[Name]",
       "Guard",
       "Guard.NormalG[1]::Exp",
       "Guard.PatG[1]::[Stmt]",
       "Inline",
       "Int.I#[1]::Int#",
       "Integer",
       "Integer.Jn#[1]::BigNat",
       "Integer.Jp#[1]::BigNat",
       "Integer.S#[1]::Int#",
       "Lit.CharL[1]::Char",
       "Lit.DoublePrimL[1]::Ratio Integer (aka Rational)",
       "Lit.FloatPrimL[1]::Ratio Integer (aka Rational)",
       "Lit.IntPrimL[1]::Integer",
       "Lit.IntegerL[1]::Integer",
       "Lit.RationalL[1]::Ratio Integer (aka Rational)",
       "Lit.StringL[1]::[Char] (aka String)",
       "Lit.StringPrimL[1]::[Word8]",
       "Lit.WordPrimL[1]::Integer",
       "Match",
       "Match.Match[1]::Pat",
       "Match.Match[2]::Body",
       "Match.Match[3]::[Dec]",
       "ModName.ModName[1]::[Char] (aka String)",
       "Name",
       "Name.Name[1]::OccName",
       "Name.Name[2]::NameFlavour",
       "NameFlavour.NameG[1]::NameSpace",
       "NameFlavour.NameG[2]::PkgName",
       "NameFlavour.NameG[3]::ModName",
       "NameFlavour.NameL[1]::Int",
       "NameFlavour.NameQ[1]::ModName",
       "NameFlavour.NameU[1]::Int",
       "OccName.OccName[1]::[Char] (aka String)",
       "Pat",
       "Pat.AsP[1]::Name",
       "Pat.AsP[2]::Pat",
       "Pat.BangP[1]::Pat",
       "Pat.ConP[1]::Name",
       "Pat.ConP[2]::[Pat]",
       "Pat.InfixP[1]::Pat",
       "Pat.InfixP[2]::Name",
       "Pat.InfixP[3]::Pat",
       "Pat.ListP[1]::[Pat]",
       "Pat.LitP[1]::Lit",
       "Pat.ParensP[1]::Pat",
       "Pat.RecP[1]::Name",
       "Pat.RecP[2]::[(Name, Pat)]",
       "Pat.SigP[1]::Pat",
       "Pat.SigP[2]::Type",
       "Pat.TildeP[1]::Pat",
       "Pat.TupP[1]::[Pat]",
       "Pat.UInfixP[1]::Pat",
       "Pat.UInfixP[2]::Name",
       "Pat.UInfixP[3]::Pat",
       "Pat.UnboxedTupP[1]::[Pat]",
       "Pat.VarP[1]::Name",
       "Pat.ViewP[1]::Exp",
       "Pat.ViewP[2]::Pat",
       "Phases.BeforePhase[1]::Int",
       "Phases.FromPhase[1]::Int",
       "PkgName.PkgName[1]::[Char] (aka String)",
       "Pragma.AnnP[1]::AnnTarget",
       "Pragma.AnnP[2]::Exp",
       "Pragma.InlineP[1]::Name",
       "Pragma.InlineP[2]::Inline",
       "Pragma.InlineP[3]::RuleMatch",
       "Pragma.InlineP[4]::Phases",
       "Pragma.LineP[1]::Int",
       "Pragma.LineP[2]::[Char] (aka String)",
       "Pragma.RuleP[1]::[Char] (aka String)",
       "Pragma.RuleP[2]::[RuleBndr]",
       "Pragma.RuleP[3]::Exp",
       "Pragma.RuleP[4]::Exp",
       "Pragma.RuleP[5]::Phases",
       "Pragma.SpecialiseInstP[1]::Type",
       "Pragma.SpecialiseP[1]::Name",
       "Pragma.SpecialiseP[2]::Type",
       "Pragma.SpecialiseP[3]::Maybe Inline",
       "Pragma.SpecialiseP[4]::Phases",
       "Range.FromR[1]::Exp",
       "Range.FromThenR[1]::Exp",
       "Range.FromThenR[2]::Exp",
       "Range.FromThenToR[1]::Exp",
       "Range.FromThenToR[2]::Exp",
       "Range.FromThenToR[3]::Exp",
       "Range.FromToR[1]::Exp",
       "Range.FromToR[2]::Exp",
       "Role",
       "RuleBndr",
       "RuleBndr.RuleVar[1]::Name",
       "RuleBndr.TypedRuleVar[1]::Name",
       "RuleBndr.TypedRuleVar[2]::Type",
       "Stmt",
       "Stmt.BindS[1]::Pat",
       "Stmt.BindS[2]::Exp",
       "Stmt.LetS[1]::[Dec]",
       "Stmt.NoBindS[1]::Exp",
       "Stmt.ParS[1]::[[Stmt]]",
       "Strict",
       "TyLit.NumTyLit[1]::Integer",
       "TyLit.StrTyLit[1]::[Char] (aka String)",
       "TySynEqn",
       "TySynEqn.TySynEqn[1]::[Type]",
       "TySynEqn.TySynEqn[2]::Type",
       "TyVarBndr",
       "TyVarBndr.KindedTV[1]::Name",
       "TyVarBndr.KindedTV[2]::Type (aka Kind)",
       "TyVarBndr.PlainTV[1]::Name",
       "Type",
       "Type.AppT[1]::Type",
       "Type.AppT[2]::Type",
       "Type.ConT[1]::Name",
       "Type.ForallT[1]::[TyVarBndr]",
       "Type.ForallT[2]::[Type] (aka Cxt)",
       "Type.ForallT[3]::Type",
       "Type.LitT[1]::TyLit",
       "Type.PromotedT[1]::Name",
       "Type.PromotedTupleT[1]::Int",
       "Type.SigT[1]::Type",
       "Type.SigT[2]::Type (aka Kind)",
       "Type.TupleT[1]::Int",
       "Type.UnboxedTupleT[1]::Int",
       "Type.VarT[1]::Name",
       "Word8",
       "Word8.W8#[1]::Word#",
       "[Stmt]"
#else
       "(Guard, Exp)",
       "(Name, Exp)",
       "(Name, Pat)",
       "(Name, Strict, Type)",
       "(Strict, Type)",
       "AnnTarget.TypeAnnotation[1]::Name",
       "AnnTarget.ValueAnnotation[1]::Name",
       "Body.GuardedB[1]::[(Guard, Exp)]",
       "Body.NormalB[1]::Exp",
       "Char",
       "Char.C#[1]::Char#",
       "Clause",
       "Clause.Clause[1]::[Pat]",
       "Clause.Clause[2]::Body",
       "Clause.Clause[3]::[Dec]",
       "Con",
       "Con.ForallC[1]::[TyVarBndr]",
       "Con.ForallC[2]::[Pred] (aka Cxt)",
       "Con.ForallC[3]::Con",
       "Con.InfixC[1]::(Strict, Type) (aka StrictType)",
       "Con.InfixC[2]::Name",
       "Con.InfixC[3]::(Strict, Type) (aka StrictType)",
       "Con.NormalC[1]::Name",
       "Con.NormalC[2]::[(Strict, Type)]",
       "Con.RecC[1]::Name",
       "Con.RecC[2]::[(Name, Strict, Type)]",
       "Dec",
       "Dec.ClassD[1]::[Pred] (aka Cxt)",
       "Dec.ClassD[2]::Name",
       "Dec.ClassD[3]::[TyVarBndr]",
       "Dec.ClassD[4]::[FunDep]",
       "Dec.ClassD[5]::[Dec]",
       "Dec.ClosedTypeFamilyD[1]::Name",
       "Dec.ClosedTypeFamilyD[2]::[TyVarBndr]",
       "Dec.ClosedTypeFamilyD[3]::Maybe Type",
       "Dec.ClosedTypeFamilyD[4]::[TySynEqn]",
       "Dec.DataD[1]::[Pred] (aka Cxt)",
       "Dec.DataD[2]::Name",
       "Dec.DataD[3]::[TyVarBndr]",
       "Dec.DataD[4]::[Con]",
       "Dec.DataD[5]::[Name]",
       "Dec.DataInstD[1]::[Pred] (aka Cxt)",
       "Dec.DataInstD[2]::Name",
       "Dec.DataInstD[3]::[Type]",
       "Dec.DataInstD[4]::[Con]",
       "Dec.DataInstD[5]::[Name]",
       "Dec.FamilyD[1]::FamFlavour",
       "Dec.FamilyD[2]::Name",
       "Dec.FamilyD[3]::[TyVarBndr]",
       "Dec.FamilyD[4]::Maybe Type",
       "Dec.ForeignD[1]::Foreign",
       "Dec.FunD[1]::Name",
       "Dec.FunD[2]::[Clause]",
       "Dec.InfixD[1]::Fixity",
       "Dec.InfixD[2]::Name",
       "Dec.InstanceD[1]::[Pred] (aka Cxt)",
       "Dec.InstanceD[2]::Type",
       "Dec.InstanceD[3]::[Dec]",
       "Dec.NewtypeD[1]::[Pred] (aka Cxt)",
       "Dec.NewtypeD[2]::Name",
       "Dec.NewtypeD[3]::[TyVarBndr]",
       "Dec.NewtypeD[4]::Con",
       "Dec.NewtypeD[5]::[Name]",
       "Dec.NewtypeInstD[1]::[Pred] (aka Cxt)",
       "Dec.NewtypeInstD[2]::Name",
       "Dec.NewtypeInstD[3]::[Type]",
       "Dec.NewtypeInstD[4]::Con",
       "Dec.NewtypeInstD[5]::[Name]",
       "Dec.PragmaD[1]::Pragma",
       "Dec.RoleAnnotD[1]::Name",
       "Dec.RoleAnnotD[2]::[Role]",
       "Dec.SigD[1]::Name",
       "Dec.SigD[2]::Type",
       "Dec.TySynD[1]::Name",
       "Dec.TySynD[2]::[TyVarBndr]",
       "Dec.TySynD[3]::Type",
       "Dec.TySynInstD[1]::Name",
       "Dec.TySynInstD[2]::TySynEqn",
       "Dec.ValD[1]::Pat",
       "Dec.ValD[2]::Body",
       "Dec.ValD[3]::[Dec]",
       "Exp",
       "Exp.AppE[1]::Exp",
       "Exp.AppE[2]::Exp",
       "Exp.ArithSeqE[1]::Range",
       "Exp.CaseE[1]::Exp",
       "Exp.CaseE[2]::[Match]",
       "Exp.CompE[1]::[Stmt]",
       "Exp.ConE[1]::Name",
       "Exp.CondE[1]::Exp",
       "Exp.CondE[2]::Exp",
       "Exp.CondE[3]::Exp",
       "Exp.DoE[1]::[Stmt]",
       "Exp.InfixE[1]::Maybe Exp",
       "Exp.InfixE[2]::Exp",
       "Exp.InfixE[3]::Maybe Exp",
       "Exp.LamCaseE[1]::[Match]",
       "Exp.LamE[1]::[Pat]",
       "Exp.LamE[2]::Exp",
       "Exp.LetE[1]::[Dec]",
       "Exp.LetE[2]::Exp",
       "Exp.ListE[1]::[Exp]",
       "Exp.LitE[1]::Lit",
       "Exp.MultiIfE[1]::[(Guard, Exp)]",
       "Exp.ParensE[1]::Exp",
       "Exp.RecConE[1]::Name",
       "Exp.RecConE[2]::[(Name, Exp)]",
       "Exp.RecUpdE[1]::Exp",
       "Exp.RecUpdE[2]::[(Name, Exp)]",
       "Exp.SigE[1]::Exp",
       "Exp.SigE[2]::Type",
       "Exp.TupE[1]::[Exp]",
       "Exp.UInfixE[1]::Exp",
       "Exp.UInfixE[2]::Exp",
       "Exp.UInfixE[3]::Exp",
       "Exp.UnboxedTupE[1]::[Exp]",
       "Exp.VarE[1]::Name",
       "Fixity.Fixity[1]::Int",
       "Fixity.Fixity[2]::FixityDirection",
       "Foreign.ExportF[1]::Callconv",
       "Foreign.ExportF[2]::[Char] (aka String)",
       "Foreign.ExportF[3]::Name",
       "Foreign.ExportF[4]::Type",
       "Foreign.ImportF[1]::Callconv",
       "Foreign.ImportF[2]::Safety",
       "Foreign.ImportF[3]::[Char] (aka String)",
       "Foreign.ImportF[4]::Name",
       "Foreign.ImportF[5]::Type",
       "FunDep",
       "FunDep.FunDep[1]::[Name]",
       "FunDep.FunDep[2]::[Name]",
       "Guard",
       "Guard.NormalG[1]::Exp",
       "Guard.PatG[1]::[Stmt]",
       "Inline",
       "Int.I#[1]::Int#",
       "Integer",
       "Integer.J#[1]::Int#",
       "Integer.J#[2]::ByteArray#",
       "Integer.S#[1]::Int#",
       "Lit.CharL[1]::Char",
       "Lit.DoublePrimL[1]::Ratio Integer (aka Rational)",
       "Lit.FloatPrimL[1]::Ratio Integer (aka Rational)",
       "Lit.IntPrimL[1]::Integer",
       "Lit.IntegerL[1]::Integer",
       "Lit.RationalL[1]::Ratio Integer (aka Rational)",
       "Lit.StringL[1]::[Char] (aka String)",
       "Lit.StringPrimL[1]::[Word8]",
       "Lit.WordPrimL[1]::Integer",
       "Match",
       "Match.Match[1]::Pat",
       "Match.Match[2]::Body",
       "Match.Match[3]::[Dec]",
       "ModName.ModName[1]::[Char] (aka String)",
       "Name",
       "Name.Name[1]::OccName",
       "Name.Name[2]::NameFlavour",
       "NameFlavour.NameG[1]::NameSpace",
       "NameFlavour.NameG[2]::PkgName",
       "NameFlavour.NameG[3]::ModName",
       "NameFlavour.NameL[1]::Int#",
       "NameFlavour.NameQ[1]::ModName",
       "NameFlavour.NameU[1]::Int#",
       "OccName.OccName[1]::[Char] (aka String)",
       "Pat",
       "Pat.AsP[1]::Name",
       "Pat.AsP[2]::Pat",
       "Pat.BangP[1]::Pat",
       "Pat.ConP[1]::Name",
       "Pat.ConP[2]::[Pat]",
       "Pat.InfixP[1]::Pat",
       "Pat.InfixP[2]::Name",
       "Pat.InfixP[3]::Pat",
       "Pat.ListP[1]::[Pat]",
       "Pat.LitP[1]::Lit",
       "Pat.ParensP[1]::Pat",
       "Pat.RecP[1]::Name",
       "Pat.RecP[2]::[(Name, Pat)]",
       "Pat.SigP[1]::Pat",
       "Pat.SigP[2]::Type",
       "Pat.TildeP[1]::Pat",
       "Pat.TupP[1]::[Pat]",
       "Pat.UInfixP[1]::Pat",
       "Pat.UInfixP[2]::Name",
       "Pat.UInfixP[3]::Pat",
       "Pat.UnboxedTupP[1]::[Pat]",
       "Pat.VarP[1]::Name",
       "Pat.ViewP[1]::Exp",
       "Pat.ViewP[2]::Pat",
       "Phases.BeforePhase[1]::Int",
       "Phases.FromPhase[1]::Int",
       "PkgName.PkgName[1]::[Char] (aka String)",
       "Pragma.AnnP[1]::AnnTarget",
       "Pragma.AnnP[2]::Exp",
       "Pragma.InlineP[1]::Name",
       "Pragma.InlineP[2]::Inline",
       "Pragma.InlineP[3]::RuleMatch",
       "Pragma.InlineP[4]::Phases",
       "Pragma.RuleP[1]::[Char] (aka String)",
       "Pragma.RuleP[2]::[RuleBndr]",
       "Pragma.RuleP[3]::Exp",
       "Pragma.RuleP[4]::Exp",
       "Pragma.RuleP[5]::Phases",
       "Pragma.SpecialiseInstP[1]::Type",
       "Pragma.SpecialiseP[1]::Name",
       "Pragma.SpecialiseP[2]::Type",
       "Pragma.SpecialiseP[3]::Maybe Inline",
       "Pragma.SpecialiseP[4]::Phases",
       "Pred",
       "Pred.ClassP[1]::Name",
       "Pred.ClassP[2]::[Type]",
       "Pred.EqualP[1]::Type",
       "Pred.EqualP[2]::Type",
       "Range.FromR[1]::Exp",
       "Range.FromThenR[1]::Exp",
       "Range.FromThenR[2]::Exp",
       "Range.FromThenToR[1]::Exp",
       "Range.FromThenToR[2]::Exp",
       "Range.FromThenToR[3]::Exp",
       "Range.FromToR[1]::Exp",
       "Range.FromToR[2]::Exp",
       "Role",
       "RuleBndr",
       "RuleBndr.RuleVar[1]::Name",
       "RuleBndr.TypedRuleVar[1]::Name",
       "RuleBndr.TypedRuleVar[2]::Type",
       "Stmt",
       "Stmt.BindS[1]::Pat",
       "Stmt.BindS[2]::Exp",
       "Stmt.LetS[1]::[Dec]",
       "Stmt.NoBindS[1]::Exp",
       "Stmt.ParS[1]::[[Stmt]]",
       "Strict",
       "TyLit.NumTyLit[1]::Integer",
       "TyLit.StrTyLit[1]::[Char] (aka String)",
       "TySynEqn",
       "TySynEqn.TySynEqn[1]::[Type]",
       "TySynEqn.TySynEqn[2]::Type",
       "TyVarBndr",
       "TyVarBndr.KindedTV[1]::Name",
       "TyVarBndr.KindedTV[2]::Type (aka Kind)",
       "TyVarBndr.PlainTV[1]::Name",
       "Type",
       "Type.AppT[1]::Type",
       "Type.AppT[2]::Type",
       "Type.ConT[1]::Name",
       "Type.ForallT[1]::[TyVarBndr]",
       "Type.ForallT[2]::[Pred] (aka Cxt)",
       "Type.ForallT[3]::Type",
       "Type.LitT[1]::TyLit",
       "Type.PromotedT[1]::Name",
       "Type.PromotedTupleT[1]::Int",
       "Type.SigT[1]::Type",
       "Type.SigT[2]::Type (aka Kind)",
       "Type.TupleT[1]::Int",
       "Type.UnboxedTupleT[1]::Int",
       "Type.VarT[1]::Name",
       "Word8",
       "Word8.W8#[1]::Word#",
       "[Stmt]"
#endif
      ]


subtypesOfDec :: Set String
subtypesOfDec =
    union
       arity0SubtypesOfDec
       (fromList ["(,)",
                  "(,) Guard",
                  "(,) Name",
                  "(,) Strict",
                  "(,,)",
                  "(,,) Name",
                  "(,,) Name Strict",
                  "Maybe",
                  "Maybe.Just[1]::a",
                  "Ratio",
                  "Ratio.:%[1]::a",
                  "Ratio.:%[2]::a",
                  "[]"])

expandedSubtypesOfDec :: Set String
expandedSubtypesOfDec =
    fromList ["(,)",
              "(,) Guard",
              "(,) Name",
              "(,) Strict",
              "(,,)",
              "(,,) Name",
              "(,,) Name Strict",
              "(Guard, Exp)",
              "(Name, Exp)",
              "(Name, Pat)",
              "(Name, Strict, Type)",
              "(Strict, Type)",
              "AnnTarget",
              "Body",
              "ByteArray#",
              "Callconv",
              "Char",
              "Char#",
              "Clause",
              "Con",
              "Dec",
              "Exp",
              "FamFlavour",
              "Fixity",
              "FixityDirection",
              "Foreign",
              "FunDep",
              "Guard",
              "Inline",
              "Int",
              "Int#",
              "Integer",
              "Lit",
              "Match",
              "Maybe",
              "Maybe Exp",
              "Maybe Inline",
              "Maybe Type",
              "ModName",
              "Name",
              "NameFlavour",
              "NameSpace",
              "OccName",
              "Pat",
              "Phases",
              "PkgName",
              "Pragma",
              "Pred",
              "Range",
              "Ratio",
              "Ratio Integer",
              "Role",
              "RuleBndr",
              "RuleMatch",
              "Safety",
              "Stmt",
              "Strict",
              "TyLit",
              "TySynEqn",
              "TyVarBndr",
              "Type",
              "Word#",
              "Word8",
              "[(Guard, Exp)]",
              "[(Name, Exp)]",
              "[(Name, Pat)]",
              "[(Name, Strict, Type)]",
              "[(Strict, Type)]",
              "[Char]",
              "[Clause]",
              "[Con]",
              "[Dec]",
              "[Exp]",
              "[FunDep]",
              "[Match]",
              "[Name]",
              "[Pat]",
              "[Pred]",
              "[Role]",
              "[RuleBndr]",
              "[Stmt]",
              "[TySynEqn]",
              "[TyVarBndr]",
              "[Type]",
              "[Word8]",
              "[[Stmt]]",
              "[]",
              "a"]

bitsInstances :: Set String
bitsInstances
    = Set.fromList
       [
#if MIN_VERSION_template_haskell(2,10,0)
        "instance Bits CChar","instance Bits CInt","instance Bits CIntMax","instance Bits CIntPtr","instance Bits CLLong","instance Bits CLong","instance Bits CPtrdiff","instance Bits CSChar","instance Bits CShort","instance Bits CSigAtomic","instance Bits CSize","instance Bits CUChar","instance Bits CUInt","instance Bits CUIntMax","instance Bits CUIntPtr","instance Bits CULLong","instance Bits CULong","instance Bits CUShort","instance Bits CWchar",
#endif
        "instance Bits Bool","instance Bits Int","instance Bits Integer","instance Bits Word","instance Bits Word16","instance Bits Word32","instance Bits Word64","instance Bits Word8",
        -- These come and go depending on the version of something.
        "instance Bits Int16","instance Bits Int32","instance Bits Int64","instance Bits Int8","instance Bits Natural" ]

enumInstances :: Set String
enumInstances =
    Set.fromList
    [
#if MIN_VERSION_template_haskell(2,10,0)
     "instance Enum (Fixed a)","instance Enum (Proxy s)","instance Enum (f a) => Enum (Alt f a)","instance Enum CChar","instance Enum CClock","instance Enum CDouble","instance Enum CFloat","instance Enum CInt","instance Enum CIntMax","instance Enum CIntPtr","instance Enum CLLong","instance Enum CLong","instance Enum CPtrdiff","instance Enum CSChar","instance Enum CSUSeconds","instance Enum CShort","instance Enum CSigAtomic","instance Enum CSize","instance Enum CTime","instance Enum CUChar","instance Enum CUInt","instance Enum CUIntMax","instance Enum CUIntPtr","instance Enum CULLong","instance Enum CULong","instance Enum CUSeconds","instance Enum CUShort","instance Enum CWchar","instance Enum Day","instance Enum NominalDiffTime",
#endif
     "instance Enum ()","instance Enum Bool","instance Enum Char","instance Enum Double","instance Enum Float","instance Enum Int","instance Enum Int16","instance Enum Int32","instance Enum Int64","instance Enum Int8","instance Enum Integer","instance Enum Natural","instance Enum Ordering","instance Enum Word","instance Enum Word16","instance Enum Word32","instance Enum Word64","instance Enum Word8","instance Integral a => Enum (Ratio a)"]

arrayInstances :: Set String
arrayInstances =
    Set.fromList ["instance IArray UArray (FunPtr a)","instance IArray UArray (Ptr a)","instance IArray UArray (StablePtr a)","instance IArray UArray Bool","instance IArray UArray Char","instance IArray UArray Double","instance IArray UArray Float","instance IArray UArray Int","instance IArray UArray Int16","instance IArray UArray Int32","instance IArray UArray Int64","instance IArray UArray Int8","instance IArray UArray Word","instance IArray UArray Word16","instance IArray UArray Word32","instance IArray UArray Word64","instance IArray UArray Word8"]
