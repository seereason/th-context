{-# LANGUAGE CPP #-}
{-# LANGUAGE TemplateHaskell #-}
module Values where

import Control.Monad (filterM)
import Data.Map as Map (Map, fromList, toList)
import Data.Ratio (Ratio)
import Data.Set as Set (Set, fromList, toList, union)
import GHC.Prim -- ByteArray#, Char#, etc
import Language.Haskell.TH
import Language.Haskell.TH.Context.Expand (E, expandType, markExpanded)
import Language.Haskell.TH.Context.Helpers (typeArity)
import Language.Haskell.TH.Context.TypeGraph (TypeGraphVertex(..), typeGraphVertices, typeGraphEdges, VertexHint(Normal))
import Language.Haskell.TH.Desugar (withLocalDeclarations)
import Language.Haskell.TH.Instances ()
import Language.Haskell.TH.Syntax
import Test.Hspec hiding (runIO)
import Test.Hspec.Core.Spec (SpecM)

import Common

subtypesOfType :: Set String
subtypesOfType =
    Set.fromList
    [
#if MIN_VERSION_template_haskell(2,10,0)
#else
#endif
     "ByteArray# (field Integer.J#[2])",
     "Char",
     "Char# (field Char.C#[1])",
     "Int (field Type.PromotedTupleT[1])",
     "Int (field Type.TupleT[1])",
     "Int (field Type.UnboxedTupleT[1])",
     "Int# (field Int.I#[1])",
     "Int# (field Integer.J#[1])",
     "Int# (field Integer.S#[1])",
     "Int# (field NameFlavour.NameL[1])",
     "Int# (field NameFlavour.NameU[1])",
     "Integer (field TyLit.NumTyLit[1])",
     "ModName (field NameFlavour.NameG[3])",
     "ModName (field NameFlavour.NameQ[1])",
     "Name (field Pred.ClassP[1])",
     "Name (field TyVarBndr.KindedTV[1])",
     "Name (field TyVarBndr.PlainTV[1])",
     "Name (field Type.ConT[1])",
     "Name (field Type.PromotedT[1])",
     "Name (field Type.VarT[1])",
     "NameFlavour (field Name.Name[2])",
     "NameSpace (field NameFlavour.NameG[1])",
     "OccName (field Name.Name[1])",
     "PkgName (field NameFlavour.NameG[2])",
     "Pred",
     "TyLit (field Type.LitT[1])",
     "TyVarBndr",
     "Type",
     "Type (aka Kind, field TyVarBndr.KindedTV[2])",
     "Type (aka Kind, field Type.SigT[2])",
     "Type (field Pred.EqualP[1])",
     "Type (field Pred.EqualP[2])",
     "Type (field Type.AppT[1])",
     "Type (field Type.AppT[2])",
     "Type (field Type.ForallT[3])",
     "Type (field Type.SigT[1])",
     "[Char] (aka String, field ModName.ModName[1])",
     "[Char] (aka String, field OccName.OccName[1])",
     "[Char] (aka String, field PkgName.PkgName[1])",
     "[Char] (aka String, field TyLit.StrTyLit[1])",
     "[Pred] (aka Cxt, field Type.ForallT[2])",
     "[TyVarBndr] (field Type.ForallT[1])",
     "[Type] (field Pred.ClassP[2])",
     "[]"
    ]

decEdges :: Set (String, [String])
decEdges =
  Set.fromList
    [
#if MIN_VERSION_template_haskell(2,10,0)
#else
#endif
     ("(,)",[]),
     ("(,) Guard",["Guard","(,)"]),
     ("(,) Name",["Name","(,)"]),
     ("(,) Strict",["Strict","(,)"]),
     ("(,,)",[]),
     ("(,,) Name",["Name","(,,)"]),
     ("(,,) Name Strict",["(,,) Name","Strict"]),
     ("(Guard, Exp)",["(,) Guard","Exp"]),
     ("(Name, Exp)",["(,) Name","Exp"]),
     ("(Name, Pat)",["(,) Name","Pat"]),
     ("(Name, Strict, Type)",["(,,) Name Strict","Type"]),
     ("(Strict, Type)",["(,) Strict","Type"]),
     ("(Strict, Type) (aka StrictType, field Con.InfixC[1])",["(,) Strict","Type"]),
     ("(Strict, Type) (aka StrictType, field Con.InfixC[3])",["(,) Strict","Type"]),
     ("AnnTarget (field Pragma.AnnP[1])",["Name (field AnnTarget.TypeAnnotation[1])","Name (field AnnTarget.ValueAnnotation[1])"]),
     ("Body (field Clause.Clause[2])",["[(Guard, Exp)] (field Body.GuardedB[1])","Exp (field Body.NormalB[1])"]),
     ("Body (field Dec.ValD[2])",["[(Guard, Exp)] (field Body.GuardedB[1])","Exp (field Body.NormalB[1])"]),
     ("Body (field Match.Match[2])",["[(Guard, Exp)] (field Body.GuardedB[1])","Exp (field Body.NormalB[1])"]),
     ("ByteArray# (field Integer.J#[2])",[]),
     ("Callconv (field Foreign.ExportF[1])",[]),
     ("Callconv (field Foreign.ImportF[1])",[]),
     ("Char",["Char# (field Char.C#[1])"]),
     ("Char (field Lit.CharL[1])",["Char# (field Char.C#[1])"]),
     ("Char# (field Char.C#[1])",[]),
     ("Clause",["[Pat] (field Clause.Clause[1])","Body (field Clause.Clause[2])","[Dec] (field Clause.Clause[3])"]),
     ("Con",["[TyVarBndr] (field Con.ForallC[1])","[Pred] (aka Cxt, field Con.ForallC[2])","Con (field Con.ForallC[3])","(Strict, Type) (aka StrictType, field Con.InfixC[1])","Name (field Con.InfixC[2])","(Strict, Type) (aka StrictType, field Con.InfixC[3])","Name (field Con.NormalC[1])","[(Strict, Type)] (field Con.NormalC[2])","Name (field Con.RecC[1])","[(Name, Strict, Type)] (field Con.RecC[2])"]),
     ("Con (field Con.ForallC[3])",["[TyVarBndr] (field Con.ForallC[1])","[Pred] (aka Cxt, field Con.ForallC[2])","Con (field Con.ForallC[3])","(Strict, Type) (aka StrictType, field Con.InfixC[1])","Name (field Con.InfixC[2])","(Strict, Type) (aka StrictType, field Con.InfixC[3])","Name (field Con.NormalC[1])","[(Strict, Type)] (field Con.NormalC[2])","Name (field Con.RecC[1])","[(Name, Strict, Type)] (field Con.RecC[2])"]),
     ("Con (field Dec.NewtypeD[4])",["[TyVarBndr] (field Con.ForallC[1])","[Pred] (aka Cxt, field Con.ForallC[2])","Con (field Con.ForallC[3])","(Strict, Type) (aka StrictType, field Con.InfixC[1])","Name (field Con.InfixC[2])","(Strict, Type) (aka StrictType, field Con.InfixC[3])","Name (field Con.NormalC[1])","[(Strict, Type)] (field Con.NormalC[2])","Name (field Con.RecC[1])","[(Name, Strict, Type)] (field Con.RecC[2])"]),
     ("Con (field Dec.NewtypeInstD[4])",["[TyVarBndr] (field Con.ForallC[1])","[Pred] (aka Cxt, field Con.ForallC[2])","Con (field Con.ForallC[3])","(Strict, Type) (aka StrictType, field Con.InfixC[1])","Name (field Con.InfixC[2])","(Strict, Type) (aka StrictType, field Con.InfixC[3])","Name (field Con.NormalC[1])","[(Strict, Type)] (field Con.NormalC[2])","Name (field Con.RecC[1])","[(Name, Strict, Type)] (field Con.RecC[2])"]),
     ("Dec",["[Pred] (aka Cxt, field Dec.ClassD[1])","Name (field Dec.ClassD[2])","[TyVarBndr] (field Dec.ClassD[3])","[FunDep] (field Dec.ClassD[4])","[Dec] (field Dec.ClassD[5])","Name (field Dec.ClosedTypeFamilyD[1])","[TyVarBndr] (field Dec.ClosedTypeFamilyD[2])","Maybe Type (field Dec.ClosedTypeFamilyD[3])","[TySynEqn] (field Dec.ClosedTypeFamilyD[4])","[Pred] (aka Cxt, field Dec.DataD[1])","Name (field Dec.DataD[2])","[TyVarBndr] (field Dec.DataD[3])","[Con] (field Dec.DataD[4])","[Name] (field Dec.DataD[5])","[Pred] (aka Cxt, field Dec.DataInstD[1])","Name (field Dec.DataInstD[2])","[Type] (field Dec.DataInstD[3])","[Con] (field Dec.DataInstD[4])","[Name] (field Dec.DataInstD[5])","FamFlavour (field Dec.FamilyD[1])","Name (field Dec.FamilyD[2])","[TyVarBndr] (field Dec.FamilyD[3])","Maybe Type (field Dec.FamilyD[4])","Foreign (field Dec.ForeignD[1])","Name (field Dec.FunD[1])","[Clause] (field Dec.FunD[2])","Fixity (field Dec.InfixD[1])","Name (field Dec.InfixD[2])","[Pred] (aka Cxt, field Dec.InstanceD[1])","Type (field Dec.InstanceD[2])","[Dec] (field Dec.InstanceD[3])","[Pred] (aka Cxt, field Dec.NewtypeD[1])","Name (field Dec.NewtypeD[2])","[TyVarBndr] (field Dec.NewtypeD[3])","Con (field Dec.NewtypeD[4])","[Name] (field Dec.NewtypeD[5])","[Pred] (aka Cxt, field Dec.NewtypeInstD[1])","Name (field Dec.NewtypeInstD[2])","[Type] (field Dec.NewtypeInstD[3])","Con (field Dec.NewtypeInstD[4])","[Name] (field Dec.NewtypeInstD[5])","Pragma (field Dec.PragmaD[1])","Name (field Dec.RoleAnnotD[1])","[Role] (field Dec.RoleAnnotD[2])","Name (field Dec.SigD[1])","Type (field Dec.SigD[2])","Name (field Dec.TySynD[1])","[TyVarBndr] (field Dec.TySynD[2])","Type (field Dec.TySynD[3])","Name (field Dec.TySynInstD[1])","TySynEqn (field Dec.TySynInstD[2])","Pat (field Dec.ValD[1])","Body (field Dec.ValD[2])","[Dec] (field Dec.ValD[3])"]),
     ("Exp",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Body.NormalB[1])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Exp.AppE[1])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Exp.AppE[2])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Exp.CaseE[1])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Exp.CondE[1])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Exp.CondE[2])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Exp.CondE[3])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Exp.InfixE[2])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Exp.LamE[2])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Exp.LetE[2])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Exp.ParensE[1])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Exp.RecUpdE[1])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Exp.SigE[1])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Exp.UInfixE[1])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Exp.UInfixE[2])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Exp.UInfixE[3])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Guard.NormalG[1])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Pat.ViewP[1])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Pragma.AnnP[2])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Pragma.RuleP[3])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Pragma.RuleP[4])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Range.FromR[1])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Range.FromThenR[1])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Range.FromThenR[2])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Range.FromThenToR[1])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Range.FromThenToR[2])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Range.FromThenToR[3])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Range.FromToR[1])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Range.FromToR[2])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Stmt.BindS[2])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("Exp (field Stmt.NoBindS[1])",["Exp (field Exp.AppE[1])","Exp (field Exp.AppE[2])","Range (field Exp.ArithSeqE[1])","Exp (field Exp.CaseE[1])","[Match] (field Exp.CaseE[2])","[Stmt] (field Exp.CompE[1])","Name (field Exp.ConE[1])","Exp (field Exp.CondE[1])","Exp (field Exp.CondE[2])","Exp (field Exp.CondE[3])","[Stmt] (field Exp.DoE[1])","Maybe Exp (field Exp.InfixE[1])","Exp (field Exp.InfixE[2])","Maybe Exp (field Exp.InfixE[3])","[Match] (field Exp.LamCaseE[1])","[Pat] (field Exp.LamE[1])","Exp (field Exp.LamE[2])","[Dec] (field Exp.LetE[1])","Exp (field Exp.LetE[2])","[Exp] (field Exp.ListE[1])","Lit (field Exp.LitE[1])","[(Guard, Exp)] (field Exp.MultiIfE[1])","Exp (field Exp.ParensE[1])","Name (field Exp.RecConE[1])","[(Name, Exp)] (field Exp.RecConE[2])","Exp (field Exp.RecUpdE[1])","[(Name, Exp)] (field Exp.RecUpdE[2])","Exp (field Exp.SigE[1])","Type (field Exp.SigE[2])","[Exp] (field Exp.TupE[1])","Exp (field Exp.UInfixE[1])","Exp (field Exp.UInfixE[2])","Exp (field Exp.UInfixE[3])","[Exp] (field Exp.UnboxedTupE[1])","Name (field Exp.VarE[1])"]),
     ("FamFlavour (field Dec.FamilyD[1])",[]),
     ("Fixity (field Dec.InfixD[1])",["Int (field Fixity.Fixity[1])","FixityDirection (field Fixity.Fixity[2])"]),
     ("FixityDirection (field Fixity.Fixity[2])",[]),
     ("Foreign (field Dec.ForeignD[1])",["Callconv (field Foreign.ExportF[1])","[Char] (aka String, field Foreign.ExportF[2])","Name (field Foreign.ExportF[3])","Type (field Foreign.ExportF[4])","Callconv (field Foreign.ImportF[1])","Safety (field Foreign.ImportF[2])","[Char] (aka String, field Foreign.ImportF[3])","Name (field Foreign.ImportF[4])","Type (field Foreign.ImportF[5])"]),
     ("FunDep",["[Name] (field FunDep.FunDep[1])","[Name] (field FunDep.FunDep[2])"]),
     ("Guard",["Exp (field Guard.NormalG[1])","[Stmt] (field Guard.PatG[1])"]),
     ("Inline",[]),
     ("Inline (field Pragma.InlineP[2])",[]),
     ("Int (field Fixity.Fixity[1])",["Int# (field Int.I#[1])"]),
     ("Int (field Phases.BeforePhase[1])",["Int# (field Int.I#[1])"]),
     ("Int (field Phases.FromPhase[1])",["Int# (field Int.I#[1])"]),
     ("Int (field Type.PromotedTupleT[1])",["Int# (field Int.I#[1])"]),
     ("Int (field Type.TupleT[1])",["Int# (field Int.I#[1])"]),
     ("Int (field Type.UnboxedTupleT[1])",["Int# (field Int.I#[1])"]),
     ("Int# (field Int.I#[1])",[]),
     ("Int# (field Integer.J#[1])",[]),
     ("Int# (field Integer.S#[1])",[]),
     ("Int# (field NameFlavour.NameL[1])",[]),
     ("Int# (field NameFlavour.NameU[1])",[]),
     ("Integer",["Int# (field Integer.J#[1])","ByteArray# (field Integer.J#[2])","Int# (field Integer.S#[1])"]),
     ("Integer (field Lit.IntPrimL[1])",["Int# (field Integer.J#[1])","ByteArray# (field Integer.J#[2])","Int# (field Integer.S#[1])"]),
     ("Integer (field Lit.IntegerL[1])",["Int# (field Integer.J#[1])","ByteArray# (field Integer.J#[2])","Int# (field Integer.S#[1])"]),
     ("Integer (field Lit.WordPrimL[1])",["Int# (field Integer.J#[1])","ByteArray# (field Integer.J#[2])","Int# (field Integer.S#[1])"]),
     ("Integer (field TyLit.NumTyLit[1])",["Int# (field Integer.J#[1])","ByteArray# (field Integer.J#[2])","Int# (field Integer.S#[1])"]),
     ("Lit (field Exp.LitE[1])",["Char (field Lit.CharL[1])","Ratio Integer (aka Rational, field Lit.DoublePrimL[1])","Ratio Integer (aka Rational, field Lit.FloatPrimL[1])","Integer (field Lit.IntPrimL[1])","Integer (field Lit.IntegerL[1])","Ratio Integer (aka Rational, field Lit.RationalL[1])","[Char] (aka String, field Lit.StringL[1])","[Word8] (field Lit.StringPrimL[1])","Integer (field Lit.WordPrimL[1])"]),
     ("Lit (field Pat.LitP[1])",["Char (field Lit.CharL[1])","Ratio Integer (aka Rational, field Lit.DoublePrimL[1])","Ratio Integer (aka Rational, field Lit.FloatPrimL[1])","Integer (field Lit.IntPrimL[1])","Integer (field Lit.IntegerL[1])","Ratio Integer (aka Rational, field Lit.RationalL[1])","[Char] (aka String, field Lit.StringL[1])","[Word8] (field Lit.StringPrimL[1])","Integer (field Lit.WordPrimL[1])"]),
     ("Match",["Pat (field Match.Match[1])","Body (field Match.Match[2])","[Dec] (field Match.Match[3])"]),
     ("Maybe",["a (field Maybe.Just[1])"]),
     ("Maybe Exp (field Exp.InfixE[1])",["Maybe","Exp"]),
     ("Maybe Exp (field Exp.InfixE[3])",["Maybe","Exp"]),
     ("Maybe Inline (field Pragma.SpecialiseP[3])",["Maybe","Inline"]),
     ("Maybe Type (field Dec.ClosedTypeFamilyD[3])",["Maybe","Type"]),
     ("Maybe Type (field Dec.FamilyD[4])",["Maybe","Type"]),
     ("ModName (field NameFlavour.NameG[3])",["[Char] (aka String, field ModName.ModName[1])"]),
     ("ModName (field NameFlavour.NameQ[1])",["[Char] (aka String, field ModName.ModName[1])"]),
     ("Name",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field AnnTarget.TypeAnnotation[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field AnnTarget.ValueAnnotation[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Con.InfixC[2])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Con.NormalC[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Con.RecC[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Dec.ClassD[2])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Dec.ClosedTypeFamilyD[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Dec.DataD[2])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Dec.DataInstD[2])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Dec.FamilyD[2])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Dec.FunD[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Dec.InfixD[2])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Dec.NewtypeD[2])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Dec.NewtypeInstD[2])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Dec.RoleAnnotD[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Dec.SigD[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Dec.TySynD[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Dec.TySynInstD[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Exp.ConE[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Exp.RecConE[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Exp.VarE[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Foreign.ExportF[3])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Foreign.ImportF[4])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Pat.AsP[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Pat.ConP[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Pat.InfixP[2])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Pat.RecP[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Pat.UInfixP[2])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Pat.VarP[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Pragma.InlineP[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Pragma.SpecialiseP[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Pred.ClassP[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field RuleBndr.RuleVar[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field RuleBndr.TypedRuleVar[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field TyVarBndr.KindedTV[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field TyVarBndr.PlainTV[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Type.ConT[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Type.PromotedT[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Type.VarT[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("NameFlavour (field Name.Name[2])",["NameSpace (field NameFlavour.NameG[1])","PkgName (field NameFlavour.NameG[2])","ModName (field NameFlavour.NameG[3])","Int# (field NameFlavour.NameL[1])","ModName (field NameFlavour.NameQ[1])","Int# (field NameFlavour.NameU[1])"]),
     ("NameSpace (field NameFlavour.NameG[1])",[]),
     ("OccName (field Name.Name[1])",["[Char] (aka String, field OccName.OccName[1])"]),
     ("Pat",["Name (field Pat.AsP[1])","Pat (field Pat.AsP[2])","Pat (field Pat.BangP[1])","Name (field Pat.ConP[1])","[Pat] (field Pat.ConP[2])","Pat (field Pat.InfixP[1])","Name (field Pat.InfixP[2])","Pat (field Pat.InfixP[3])","[Pat] (field Pat.ListP[1])","Lit (field Pat.LitP[1])","Pat (field Pat.ParensP[1])","Name (field Pat.RecP[1])","[(Name, Pat)] (field Pat.RecP[2])","Pat (field Pat.SigP[1])","Type (field Pat.SigP[2])","Pat (field Pat.TildeP[1])","[Pat] (field Pat.TupP[1])","Pat (field Pat.UInfixP[1])","Name (field Pat.UInfixP[2])","Pat (field Pat.UInfixP[3])","[Pat] (field Pat.UnboxedTupP[1])","Name (field Pat.VarP[1])","Exp (field Pat.ViewP[1])","Pat (field Pat.ViewP[2])"]),
     ("Pat (field Dec.ValD[1])",["Name (field Pat.AsP[1])","Pat (field Pat.AsP[2])","Pat (field Pat.BangP[1])","Name (field Pat.ConP[1])","[Pat] (field Pat.ConP[2])","Pat (field Pat.InfixP[1])","Name (field Pat.InfixP[2])","Pat (field Pat.InfixP[3])","[Pat] (field Pat.ListP[1])","Lit (field Pat.LitP[1])","Pat (field Pat.ParensP[1])","Name (field Pat.RecP[1])","[(Name, Pat)] (field Pat.RecP[2])","Pat (field Pat.SigP[1])","Type (field Pat.SigP[2])","Pat (field Pat.TildeP[1])","[Pat] (field Pat.TupP[1])","Pat (field Pat.UInfixP[1])","Name (field Pat.UInfixP[2])","Pat (field Pat.UInfixP[3])","[Pat] (field Pat.UnboxedTupP[1])","Name (field Pat.VarP[1])","Exp (field Pat.ViewP[1])","Pat (field Pat.ViewP[2])"]),
     ("Pat (field Match.Match[1])",["Name (field Pat.AsP[1])","Pat (field Pat.AsP[2])","Pat (field Pat.BangP[1])","Name (field Pat.ConP[1])","[Pat] (field Pat.ConP[2])","Pat (field Pat.InfixP[1])","Name (field Pat.InfixP[2])","Pat (field Pat.InfixP[3])","[Pat] (field Pat.ListP[1])","Lit (field Pat.LitP[1])","Pat (field Pat.ParensP[1])","Name (field Pat.RecP[1])","[(Name, Pat)] (field Pat.RecP[2])","Pat (field Pat.SigP[1])","Type (field Pat.SigP[2])","Pat (field Pat.TildeP[1])","[Pat] (field Pat.TupP[1])","Pat (field Pat.UInfixP[1])","Name (field Pat.UInfixP[2])","Pat (field Pat.UInfixP[3])","[Pat] (field Pat.UnboxedTupP[1])","Name (field Pat.VarP[1])","Exp (field Pat.ViewP[1])","Pat (field Pat.ViewP[2])"]),
     ("Pat (field Pat.AsP[2])",["Name (field Pat.AsP[1])","Pat (field Pat.AsP[2])","Pat (field Pat.BangP[1])","Name (field Pat.ConP[1])","[Pat] (field Pat.ConP[2])","Pat (field Pat.InfixP[1])","Name (field Pat.InfixP[2])","Pat (field Pat.InfixP[3])","[Pat] (field Pat.ListP[1])","Lit (field Pat.LitP[1])","Pat (field Pat.ParensP[1])","Name (field Pat.RecP[1])","[(Name, Pat)] (field Pat.RecP[2])","Pat (field Pat.SigP[1])","Type (field Pat.SigP[2])","Pat (field Pat.TildeP[1])","[Pat] (field Pat.TupP[1])","Pat (field Pat.UInfixP[1])","Name (field Pat.UInfixP[2])","Pat (field Pat.UInfixP[3])","[Pat] (field Pat.UnboxedTupP[1])","Name (field Pat.VarP[1])","Exp (field Pat.ViewP[1])","Pat (field Pat.ViewP[2])"]),
     ("Pat (field Pat.BangP[1])",["Name (field Pat.AsP[1])","Pat (field Pat.AsP[2])","Pat (field Pat.BangP[1])","Name (field Pat.ConP[1])","[Pat] (field Pat.ConP[2])","Pat (field Pat.InfixP[1])","Name (field Pat.InfixP[2])","Pat (field Pat.InfixP[3])","[Pat] (field Pat.ListP[1])","Lit (field Pat.LitP[1])","Pat (field Pat.ParensP[1])","Name (field Pat.RecP[1])","[(Name, Pat)] (field Pat.RecP[2])","Pat (field Pat.SigP[1])","Type (field Pat.SigP[2])","Pat (field Pat.TildeP[1])","[Pat] (field Pat.TupP[1])","Pat (field Pat.UInfixP[1])","Name (field Pat.UInfixP[2])","Pat (field Pat.UInfixP[3])","[Pat] (field Pat.UnboxedTupP[1])","Name (field Pat.VarP[1])","Exp (field Pat.ViewP[1])","Pat (field Pat.ViewP[2])"]),
     ("Pat (field Pat.InfixP[1])",["Name (field Pat.AsP[1])","Pat (field Pat.AsP[2])","Pat (field Pat.BangP[1])","Name (field Pat.ConP[1])","[Pat] (field Pat.ConP[2])","Pat (field Pat.InfixP[1])","Name (field Pat.InfixP[2])","Pat (field Pat.InfixP[3])","[Pat] (field Pat.ListP[1])","Lit (field Pat.LitP[1])","Pat (field Pat.ParensP[1])","Name (field Pat.RecP[1])","[(Name, Pat)] (field Pat.RecP[2])","Pat (field Pat.SigP[1])","Type (field Pat.SigP[2])","Pat (field Pat.TildeP[1])","[Pat] (field Pat.TupP[1])","Pat (field Pat.UInfixP[1])","Name (field Pat.UInfixP[2])","Pat (field Pat.UInfixP[3])","[Pat] (field Pat.UnboxedTupP[1])","Name (field Pat.VarP[1])","Exp (field Pat.ViewP[1])","Pat (field Pat.ViewP[2])"]),
     ("Pat (field Pat.InfixP[3])",["Name (field Pat.AsP[1])","Pat (field Pat.AsP[2])","Pat (field Pat.BangP[1])","Name (field Pat.ConP[1])","[Pat] (field Pat.ConP[2])","Pat (field Pat.InfixP[1])","Name (field Pat.InfixP[2])","Pat (field Pat.InfixP[3])","[Pat] (field Pat.ListP[1])","Lit (field Pat.LitP[1])","Pat (field Pat.ParensP[1])","Name (field Pat.RecP[1])","[(Name, Pat)] (field Pat.RecP[2])","Pat (field Pat.SigP[1])","Type (field Pat.SigP[2])","Pat (field Pat.TildeP[1])","[Pat] (field Pat.TupP[1])","Pat (field Pat.UInfixP[1])","Name (field Pat.UInfixP[2])","Pat (field Pat.UInfixP[3])","[Pat] (field Pat.UnboxedTupP[1])","Name (field Pat.VarP[1])","Exp (field Pat.ViewP[1])","Pat (field Pat.ViewP[2])"]),
     ("Pat (field Pat.ParensP[1])",["Name (field Pat.AsP[1])","Pat (field Pat.AsP[2])","Pat (field Pat.BangP[1])","Name (field Pat.ConP[1])","[Pat] (field Pat.ConP[2])","Pat (field Pat.InfixP[1])","Name (field Pat.InfixP[2])","Pat (field Pat.InfixP[3])","[Pat] (field Pat.ListP[1])","Lit (field Pat.LitP[1])","Pat (field Pat.ParensP[1])","Name (field Pat.RecP[1])","[(Name, Pat)] (field Pat.RecP[2])","Pat (field Pat.SigP[1])","Type (field Pat.SigP[2])","Pat (field Pat.TildeP[1])","[Pat] (field Pat.TupP[1])","Pat (field Pat.UInfixP[1])","Name (field Pat.UInfixP[2])","Pat (field Pat.UInfixP[3])","[Pat] (field Pat.UnboxedTupP[1])","Name (field Pat.VarP[1])","Exp (field Pat.ViewP[1])","Pat (field Pat.ViewP[2])"]),
     ("Pat (field Pat.SigP[1])",["Name (field Pat.AsP[1])","Pat (field Pat.AsP[2])","Pat (field Pat.BangP[1])","Name (field Pat.ConP[1])","[Pat] (field Pat.ConP[2])","Pat (field Pat.InfixP[1])","Name (field Pat.InfixP[2])","Pat (field Pat.InfixP[3])","[Pat] (field Pat.ListP[1])","Lit (field Pat.LitP[1])","Pat (field Pat.ParensP[1])","Name (field Pat.RecP[1])","[(Name, Pat)] (field Pat.RecP[2])","Pat (field Pat.SigP[1])","Type (field Pat.SigP[2])","Pat (field Pat.TildeP[1])","[Pat] (field Pat.TupP[1])","Pat (field Pat.UInfixP[1])","Name (field Pat.UInfixP[2])","Pat (field Pat.UInfixP[3])","[Pat] (field Pat.UnboxedTupP[1])","Name (field Pat.VarP[1])","Exp (field Pat.ViewP[1])","Pat (field Pat.ViewP[2])"]),
     ("Pat (field Pat.TildeP[1])",["Name (field Pat.AsP[1])","Pat (field Pat.AsP[2])","Pat (field Pat.BangP[1])","Name (field Pat.ConP[1])","[Pat] (field Pat.ConP[2])","Pat (field Pat.InfixP[1])","Name (field Pat.InfixP[2])","Pat (field Pat.InfixP[3])","[Pat] (field Pat.ListP[1])","Lit (field Pat.LitP[1])","Pat (field Pat.ParensP[1])","Name (field Pat.RecP[1])","[(Name, Pat)] (field Pat.RecP[2])","Pat (field Pat.SigP[1])","Type (field Pat.SigP[2])","Pat (field Pat.TildeP[1])","[Pat] (field Pat.TupP[1])","Pat (field Pat.UInfixP[1])","Name (field Pat.UInfixP[2])","Pat (field Pat.UInfixP[3])","[Pat] (field Pat.UnboxedTupP[1])","Name (field Pat.VarP[1])","Exp (field Pat.ViewP[1])","Pat (field Pat.ViewP[2])"]),
     ("Pat (field Pat.UInfixP[1])",["Name (field Pat.AsP[1])","Pat (field Pat.AsP[2])","Pat (field Pat.BangP[1])","Name (field Pat.ConP[1])","[Pat] (field Pat.ConP[2])","Pat (field Pat.InfixP[1])","Name (field Pat.InfixP[2])","Pat (field Pat.InfixP[3])","[Pat] (field Pat.ListP[1])","Lit (field Pat.LitP[1])","Pat (field Pat.ParensP[1])","Name (field Pat.RecP[1])","[(Name, Pat)] (field Pat.RecP[2])","Pat (field Pat.SigP[1])","Type (field Pat.SigP[2])","Pat (field Pat.TildeP[1])","[Pat] (field Pat.TupP[1])","Pat (field Pat.UInfixP[1])","Name (field Pat.UInfixP[2])","Pat (field Pat.UInfixP[3])","[Pat] (field Pat.UnboxedTupP[1])","Name (field Pat.VarP[1])","Exp (field Pat.ViewP[1])","Pat (field Pat.ViewP[2])"]),
     ("Pat (field Pat.UInfixP[3])",["Name (field Pat.AsP[1])","Pat (field Pat.AsP[2])","Pat (field Pat.BangP[1])","Name (field Pat.ConP[1])","[Pat] (field Pat.ConP[2])","Pat (field Pat.InfixP[1])","Name (field Pat.InfixP[2])","Pat (field Pat.InfixP[3])","[Pat] (field Pat.ListP[1])","Lit (field Pat.LitP[1])","Pat (field Pat.ParensP[1])","Name (field Pat.RecP[1])","[(Name, Pat)] (field Pat.RecP[2])","Pat (field Pat.SigP[1])","Type (field Pat.SigP[2])","Pat (field Pat.TildeP[1])","[Pat] (field Pat.TupP[1])","Pat (field Pat.UInfixP[1])","Name (field Pat.UInfixP[2])","Pat (field Pat.UInfixP[3])","[Pat] (field Pat.UnboxedTupP[1])","Name (field Pat.VarP[1])","Exp (field Pat.ViewP[1])","Pat (field Pat.ViewP[2])"]),
     ("Pat (field Pat.ViewP[2])",["Name (field Pat.AsP[1])","Pat (field Pat.AsP[2])","Pat (field Pat.BangP[1])","Name (field Pat.ConP[1])","[Pat] (field Pat.ConP[2])","Pat (field Pat.InfixP[1])","Name (field Pat.InfixP[2])","Pat (field Pat.InfixP[3])","[Pat] (field Pat.ListP[1])","Lit (field Pat.LitP[1])","Pat (field Pat.ParensP[1])","Name (field Pat.RecP[1])","[(Name, Pat)] (field Pat.RecP[2])","Pat (field Pat.SigP[1])","Type (field Pat.SigP[2])","Pat (field Pat.TildeP[1])","[Pat] (field Pat.TupP[1])","Pat (field Pat.UInfixP[1])","Name (field Pat.UInfixP[2])","Pat (field Pat.UInfixP[3])","[Pat] (field Pat.UnboxedTupP[1])","Name (field Pat.VarP[1])","Exp (field Pat.ViewP[1])","Pat (field Pat.ViewP[2])"]),
     ("Pat (field Stmt.BindS[1])",["Name (field Pat.AsP[1])","Pat (field Pat.AsP[2])","Pat (field Pat.BangP[1])","Name (field Pat.ConP[1])","[Pat] (field Pat.ConP[2])","Pat (field Pat.InfixP[1])","Name (field Pat.InfixP[2])","Pat (field Pat.InfixP[3])","[Pat] (field Pat.ListP[1])","Lit (field Pat.LitP[1])","Pat (field Pat.ParensP[1])","Name (field Pat.RecP[1])","[(Name, Pat)] (field Pat.RecP[2])","Pat (field Pat.SigP[1])","Type (field Pat.SigP[2])","Pat (field Pat.TildeP[1])","[Pat] (field Pat.TupP[1])","Pat (field Pat.UInfixP[1])","Name (field Pat.UInfixP[2])","Pat (field Pat.UInfixP[3])","[Pat] (field Pat.UnboxedTupP[1])","Name (field Pat.VarP[1])","Exp (field Pat.ViewP[1])","Pat (field Pat.ViewP[2])"]),
     ("Phases (field Pragma.InlineP[4])",["Int (field Phases.BeforePhase[1])","Int (field Phases.FromPhase[1])"]),
     ("Phases (field Pragma.RuleP[5])",["Int (field Phases.BeforePhase[1])","Int (field Phases.FromPhase[1])"]),
     ("Phases (field Pragma.SpecialiseP[4])",["Int (field Phases.BeforePhase[1])","Int (field Phases.FromPhase[1])"]),
     ("PkgName (field NameFlavour.NameG[2])",["[Char] (aka String, field PkgName.PkgName[1])"]),
     ("Pragma (field Dec.PragmaD[1])",["AnnTarget (field Pragma.AnnP[1])","Exp (field Pragma.AnnP[2])","Name (field Pragma.InlineP[1])","Inline (field Pragma.InlineP[2])","RuleMatch (field Pragma.InlineP[3])","Phases (field Pragma.InlineP[4])","[Char] (aka String, field Pragma.RuleP[1])","[RuleBndr] (field Pragma.RuleP[2])","Exp (field Pragma.RuleP[3])","Exp (field Pragma.RuleP[4])","Phases (field Pragma.RuleP[5])","Type (field Pragma.SpecialiseInstP[1])","Name (field Pragma.SpecialiseP[1])","Type (field Pragma.SpecialiseP[2])","Maybe Inline (field Pragma.SpecialiseP[3])","Phases (field Pragma.SpecialiseP[4])"]),
     ("Pred",["Name (field Pred.ClassP[1])","[Type] (field Pred.ClassP[2])","Type (field Pred.EqualP[1])","Type (field Pred.EqualP[2])"]),
     ("Range (field Exp.ArithSeqE[1])",["Exp (field Range.FromR[1])","Exp (field Range.FromThenR[1])","Exp (field Range.FromThenR[2])","Exp (field Range.FromThenToR[1])","Exp (field Range.FromThenToR[2])","Exp (field Range.FromThenToR[3])","Exp (field Range.FromToR[1])","Exp (field Range.FromToR[2])"]),
     ("Ratio",["a (field Ratio.:%[1])","a (field Ratio.:%[2])"]),
     ("Ratio Integer (aka Rational, field Lit.DoublePrimL[1])",["Ratio","Integer"]),
     ("Ratio Integer (aka Rational, field Lit.FloatPrimL[1])",["Ratio","Integer"]),
     ("Ratio Integer (aka Rational, field Lit.RationalL[1])",["Ratio","Integer"]),
     ("Role",[]),
     ("RuleBndr",["Name (field RuleBndr.RuleVar[1])","Name (field RuleBndr.TypedRuleVar[1])","Type (field RuleBndr.TypedRuleVar[2])"]),
     ("RuleMatch (field Pragma.InlineP[3])",[]),
     ("Safety (field Foreign.ImportF[2])",[]),
     ("Stmt",["Pat (field Stmt.BindS[1])","Exp (field Stmt.BindS[2])","[Dec] (field Stmt.LetS[1])","Exp (field Stmt.NoBindS[1])","[[Stmt]] (field Stmt.ParS[1])"]),
     ("Strict",[]),
     ("TyLit (field Type.LitT[1])",["Integer (field TyLit.NumTyLit[1])","[Char] (aka String, field TyLit.StrTyLit[1])"]),
     ("TySynEqn",["[Type] (field TySynEqn.TySynEqn[1])","Type (field TySynEqn.TySynEqn[2])"]),
     ("TySynEqn (field Dec.TySynInstD[2])",["[Type] (field TySynEqn.TySynEqn[1])","Type (field TySynEqn.TySynEqn[2])"]),
     ("TyVarBndr",["Name (field TyVarBndr.KindedTV[1])","Type (aka Kind, field TyVarBndr.KindedTV[2])","Name (field TyVarBndr.PlainTV[1])"]),
     ("Type",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (aka Kind, field TyVarBndr.KindedTV[2])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (aka Kind, field Type.SigT[2])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (field Dec.InstanceD[2])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (field Dec.SigD[2])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (field Dec.TySynD[3])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (field Exp.SigE[2])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (field Foreign.ExportF[4])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (field Foreign.ImportF[5])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (field Pat.SigP[2])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (field Pragma.SpecialiseInstP[1])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (field Pragma.SpecialiseP[2])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (field Pred.EqualP[1])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (field Pred.EqualP[2])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (field RuleBndr.TypedRuleVar[2])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (field TySynEqn.TySynEqn[2])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (field Type.AppT[1])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (field Type.AppT[2])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (field Type.ForallT[3])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (field Type.SigT[1])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Word# (field Word8.W8#[1])",[]),
     ("Word8",["Word# (field Word8.W8#[1])"]),
     ("[(Guard, Exp)] (field Body.GuardedB[1])",["(Guard, Exp)","[]"]),
     ("[(Guard, Exp)] (field Exp.MultiIfE[1])",["(Guard, Exp)","[]"]),
     ("[(Name, Exp)] (field Exp.RecConE[2])",["(Name, Exp)","[]"]),
     ("[(Name, Exp)] (field Exp.RecUpdE[2])",["(Name, Exp)","[]"]),
     ("[(Name, Pat)] (field Pat.RecP[2])",["(Name, Pat)","[]"]),
     ("[(Name, Strict, Type)] (field Con.RecC[2])",["(Name, Strict, Type)","[]"]),
     ("[(Strict, Type)] (field Con.NormalC[2])",["(Strict, Type)","[]"]),
     ("[Char] (aka String, field Foreign.ExportF[2])",["Char","[]"]),
     ("[Char] (aka String, field Foreign.ImportF[3])",["Char","[]"]),
     ("[Char] (aka String, field Lit.StringL[1])",["Char","[]"]),
     ("[Char] (aka String, field ModName.ModName[1])",["Char","[]"]),
     ("[Char] (aka String, field OccName.OccName[1])",["Char","[]"]),
     ("[Char] (aka String, field PkgName.PkgName[1])",["Char","[]"]),
     ("[Char] (aka String, field Pragma.RuleP[1])",["Char","[]"]),
     ("[Char] (aka String, field TyLit.StrTyLit[1])",["Char","[]"]),
     ("[Clause] (field Dec.FunD[2])",["Clause","[]"]),
     ("[Con] (field Dec.DataD[4])",["Con","[]"]),
     ("[Con] (field Dec.DataInstD[4])",["Con","[]"]),
     ("[Dec] (field Clause.Clause[3])",["Dec","[]"]),
     ("[Dec] (field Dec.ClassD[5])",["Dec","[]"]),
     ("[Dec] (field Dec.InstanceD[3])",["Dec","[]"]),
     ("[Dec] (field Dec.ValD[3])",["Dec","[]"]),
     ("[Dec] (field Exp.LetE[1])",["Dec","[]"]),
     ("[Dec] (field Match.Match[3])",["Dec","[]"]),
     ("[Dec] (field Stmt.LetS[1])",["Dec","[]"]),
     ("[Exp] (field Exp.ListE[1])",["Exp","[]"]),
     ("[Exp] (field Exp.TupE[1])",["Exp","[]"]),
     ("[Exp] (field Exp.UnboxedTupE[1])",["Exp","[]"]),
     ("[FunDep] (field Dec.ClassD[4])",["FunDep","[]"]),
     ("[Match] (field Exp.CaseE[2])",["Match","[]"]),
     ("[Match] (field Exp.LamCaseE[1])",["Match","[]"]),
     ("[Name] (field Dec.DataD[5])",["Name","[]"]),
     ("[Name] (field Dec.DataInstD[5])",["Name","[]"]),
     ("[Name] (field Dec.NewtypeD[5])",["Name","[]"]),
     ("[Name] (field Dec.NewtypeInstD[5])",["Name","[]"]),
     ("[Name] (field FunDep.FunDep[1])",["Name","[]"]),
     ("[Name] (field FunDep.FunDep[2])",["Name","[]"]),
     ("[Pat] (field Clause.Clause[1])",["Pat","[]"]),
     ("[Pat] (field Exp.LamE[1])",["Pat","[]"]),
     ("[Pat] (field Pat.ConP[2])",["Pat","[]"]),
     ("[Pat] (field Pat.ListP[1])",["Pat","[]"]),
     ("[Pat] (field Pat.TupP[1])",["Pat","[]"]),
     ("[Pat] (field Pat.UnboxedTupP[1])",["Pat","[]"]),
     ("[Pred] (aka Cxt, field Con.ForallC[2])",["Pred","[]"]),
     ("[Pred] (aka Cxt, field Dec.ClassD[1])",["Pred","[]"]),
     ("[Pred] (aka Cxt, field Dec.DataD[1])",["Pred","[]"]),
     ("[Pred] (aka Cxt, field Dec.DataInstD[1])",["Pred","[]"]),
     ("[Pred] (aka Cxt, field Dec.InstanceD[1])",["Pred","[]"]),
     ("[Pred] (aka Cxt, field Dec.NewtypeD[1])",["Pred","[]"]),
     ("[Pred] (aka Cxt, field Dec.NewtypeInstD[1])",["Pred","[]"]),
     ("[Pred] (aka Cxt, field Type.ForallT[2])",["Pred","[]"]),
     ("[Role] (field Dec.RoleAnnotD[2])",["Role","[]"]),
     ("[RuleBndr] (field Pragma.RuleP[2])",["RuleBndr","[]"]),
     ("[Stmt]",["Stmt","[]"]),
     ("[Stmt] (field Exp.CompE[1])",["Stmt","[]"]),
     ("[Stmt] (field Exp.DoE[1])",["Stmt","[]"]),
     ("[Stmt] (field Guard.PatG[1])",["Stmt","[]"]),
     ("[TySynEqn] (field Dec.ClosedTypeFamilyD[4])",["TySynEqn","[]"]),
     ("[TyVarBndr] (field Con.ForallC[1])",["TyVarBndr","[]"]),
     ("[TyVarBndr] (field Dec.ClassD[3])",["TyVarBndr","[]"]),
     ("[TyVarBndr] (field Dec.ClosedTypeFamilyD[2])",["TyVarBndr","[]"]),
     ("[TyVarBndr] (field Dec.DataD[3])",["TyVarBndr","[]"]),
     ("[TyVarBndr] (field Dec.FamilyD[3])",["TyVarBndr","[]"]),
     ("[TyVarBndr] (field Dec.NewtypeD[3])",["TyVarBndr","[]"]),
     ("[TyVarBndr] (field Dec.TySynD[2])",["TyVarBndr","[]"]),
     ("[TyVarBndr] (field Type.ForallT[1])",["TyVarBndr","[]"]),
     ("[Type] (field Dec.DataInstD[3])",["Type","[]"]),
     ("[Type] (field Dec.NewtypeInstD[3])",["Type","[]"]),
     ("[Type] (field Pred.ClassP[2])",["Type","[]"]),
     ("[Type] (field TySynEqn.TySynEqn[1])",["Type","[]"]),
     ("[Word8] (field Lit.StringPrimL[1])",["Word8","[]"]),
     ("[[Stmt]] (field Stmt.ParS[1])",["[Stmt]","[]"]),
     ("[]",[]),
     ("a (field Maybe.Just[1])",[]),
     ("a (field Ratio.:%[1])",[]),
     ("a (field Ratio.:%[2])",[])
    ]

typeEdges :: Set (String, [String])
typeEdges =
    Set.fromList
      [
#if MIN_VERSION_template_haskell(2,10,0)
#else
#endif
     ("ByteArray# (field Integer.J#[2])",[]),
     ("Char",["Char# (field Char.C#[1])"]),
     ("Char# (field Char.C#[1])",[]),
     ("Int (field Type.PromotedTupleT[1])",["Int# (field Int.I#[1])"]),
     ("Int (field Type.TupleT[1])",["Int# (field Int.I#[1])"]),
     ("Int (field Type.UnboxedTupleT[1])",["Int# (field Int.I#[1])"]),
     ("Int# (field Int.I#[1])",[]),
     ("Int# (field Integer.J#[1])",[]),
     ("Int# (field Integer.S#[1])",[]),
     ("Int# (field NameFlavour.NameL[1])",[]),
     ("Int# (field NameFlavour.NameU[1])",[]),
     ("Integer (field TyLit.NumTyLit[1])",["Int# (field Integer.J#[1])","ByteArray# (field Integer.J#[2])","Int# (field Integer.S#[1])"]),
     ("ModName (field NameFlavour.NameG[3])",["[Char] (aka String, field ModName.ModName[1])"]),
     ("ModName (field NameFlavour.NameQ[1])",["[Char] (aka String, field ModName.ModName[1])"]),
     ("Name (field Pred.ClassP[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field TyVarBndr.KindedTV[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field TyVarBndr.PlainTV[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Type.ConT[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Type.PromotedT[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("Name (field Type.VarT[1])",["OccName (field Name.Name[1])","NameFlavour (field Name.Name[2])"]),
     ("NameFlavour (field Name.Name[2])",["NameSpace (field NameFlavour.NameG[1])","PkgName (field NameFlavour.NameG[2])","ModName (field NameFlavour.NameG[3])","Int# (field NameFlavour.NameL[1])","ModName (field NameFlavour.NameQ[1])","Int# (field NameFlavour.NameU[1])"]),
     ("NameSpace (field NameFlavour.NameG[1])",[]),
     ("OccName (field Name.Name[1])",["[Char] (aka String, field OccName.OccName[1])"]),
     ("PkgName (field NameFlavour.NameG[2])",["[Char] (aka String, field PkgName.PkgName[1])"]),
     ("Pred",["Name (field Pred.ClassP[1])","[Type] (field Pred.ClassP[2])","Type (field Pred.EqualP[1])","Type (field Pred.EqualP[2])"]),
     ("TyLit (field Type.LitT[1])",["Integer (field TyLit.NumTyLit[1])","[Char] (aka String, field TyLit.StrTyLit[1])"]),
     ("TyVarBndr",["Name (field TyVarBndr.KindedTV[1])","Type (aka Kind, field TyVarBndr.KindedTV[2])","Name (field TyVarBndr.PlainTV[1])"]),
     ("Type",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (aka Kind, field TyVarBndr.KindedTV[2])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (aka Kind, field Type.SigT[2])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (field Pred.EqualP[1])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (field Pred.EqualP[2])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (field Type.AppT[1])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (field Type.AppT[2])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (field Type.ForallT[3])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("Type (field Type.SigT[1])",["Type (field Type.AppT[1])","Type (field Type.AppT[2])","Name (field Type.ConT[1])","[TyVarBndr] (field Type.ForallT[1])","[Pred] (aka Cxt, field Type.ForallT[2])","Type (field Type.ForallT[3])","TyLit (field Type.LitT[1])","Name (field Type.PromotedT[1])","Int (field Type.PromotedTupleT[1])","Type (field Type.SigT[1])","Type (aka Kind, field Type.SigT[2])","Int (field Type.TupleT[1])","Int (field Type.UnboxedTupleT[1])","Name (field Type.VarT[1])"]),
     ("[Char] (aka String, field ModName.ModName[1])",["Char","[]"]),
     ("[Char] (aka String, field OccName.OccName[1])",["Char","[]"]),
     ("[Char] (aka String, field PkgName.PkgName[1])",["Char","[]"]),
     ("[Char] (aka String, field TyLit.StrTyLit[1])",["Char","[]"]),
     ("[Pred] (aka Cxt, field Type.ForallT[2])",["Pred","[]"]),
     ("[TyVarBndr] (field Type.ForallT[1])",["TyVarBndr","[]"]),
     ("[Type] (field Pred.ClassP[2])",["Type","[]"]),
     ("[]",[])
    ]

arity0SubtypesOfDec :: Set String
arity0SubtypesOfDec =
    Set.fromList
      [
#if MIN_VERSION_template_haskell(2,10,0)
#else
#endif
       "(Guard, Exp)",
       "(Name, Exp)",
       "(Name, Pat)",
       "(Name, Strict, Type)",
       "(Strict, Type)",
       "Char",
       "Clause",
       "Con",
       "Dec",
       "Exp",
       "FunDep",
       "Guard",
       "Inline",
       "Integer",
       "Match",
       "Name",
       "Pat",
       "Pred",
       "Role",
       "RuleBndr",
       "Stmt",
       "Strict",
       "TySynEqn",
       "TyVarBndr",
       "Type",
       "Word8",
       "[Stmt]",
       "(Strict, Type) (aka StrictType, field Con.InfixC[1])",
       "(Strict, Type) (aka StrictType, field Con.InfixC[3])",
       "AnnTarget (field Pragma.AnnP[1])",
       "Body (field Clause.Clause[2])",
       "Body (field Dec.ValD[2])",
       "Body (field Match.Match[2])",
       "ByteArray# (field Integer.J#[2])",
       "Callconv (field Foreign.ExportF[1])",
       "Callconv (field Foreign.ImportF[1])",
       "Char (field Lit.CharL[1])",
       "Char# (field Char.C#[1])",
       "Con (field Con.ForallC[3])",
       "Con (field Dec.NewtypeD[4])",
       "Con (field Dec.NewtypeInstD[4])",
       "Exp (field Body.NormalB[1])",
       "Exp (field Exp.AppE[1])",
       "Exp (field Exp.AppE[2])",
       "Exp (field Exp.CaseE[1])",
       "Exp (field Exp.CondE[1])",
       "Exp (field Exp.CondE[2])",
       "Exp (field Exp.CondE[3])",
       "Exp (field Exp.InfixE[2])",
       "Exp (field Exp.LamE[2])",
       "Exp (field Exp.LetE[2])",
       "Exp (field Exp.ParensE[1])",
       "Exp (field Exp.RecUpdE[1])",
       "Exp (field Exp.SigE[1])",
       "Exp (field Exp.UInfixE[1])",
       "Exp (field Exp.UInfixE[2])",
       "Exp (field Exp.UInfixE[3])",
       "Exp (field Guard.NormalG[1])",
       "Exp (field Pat.ViewP[1])",
       "Exp (field Pragma.AnnP[2])",
       "Exp (field Pragma.RuleP[3])",
       "Exp (field Pragma.RuleP[4])",
       "Exp (field Range.FromR[1])",
       "Exp (field Range.FromThenR[1])",
       "Exp (field Range.FromThenR[2])",
       "Exp (field Range.FromThenToR[1])",
       "Exp (field Range.FromThenToR[2])",
       "Exp (field Range.FromThenToR[3])",
       "Exp (field Range.FromToR[1])",
       "Exp (field Range.FromToR[2])",
       "Exp (field Stmt.BindS[2])",
       "Exp (field Stmt.NoBindS[1])",
       "FamFlavour (field Dec.FamilyD[1])",
       "Fixity (field Dec.InfixD[1])",
       "FixityDirection (field Fixity.Fixity[2])",
       "Foreign (field Dec.ForeignD[1])",
       "Inline (field Pragma.InlineP[2])",
       "Int (field Fixity.Fixity[1])",
       "Int (field Phases.BeforePhase[1])",
       "Int (field Phases.FromPhase[1])",
       "Int (field Type.PromotedTupleT[1])",
       "Int (field Type.TupleT[1])",
       "Int (field Type.UnboxedTupleT[1])",
       "Int# (field Int.I#[1])",
       "Int# (field Integer.J#[1])",
       "Int# (field Integer.S#[1])",
       "Int# (field NameFlavour.NameL[1])",
       "Int# (field NameFlavour.NameU[1])",
       "Integer (field Lit.IntPrimL[1])",
       "Integer (field Lit.IntegerL[1])",
       "Integer (field Lit.WordPrimL[1])",
       "Integer (field TyLit.NumTyLit[1])",
       "Lit (field Exp.LitE[1])",
       "Lit (field Pat.LitP[1])",
       "Maybe Exp (field Exp.InfixE[1])",
       "Maybe Exp (field Exp.InfixE[3])",
       "Maybe Inline (field Pragma.SpecialiseP[3])",
       "Maybe Type (field Dec.ClosedTypeFamilyD[3])",
       "Maybe Type (field Dec.FamilyD[4])",
       "ModName (field NameFlavour.NameG[3])",
       "ModName (field NameFlavour.NameQ[1])",
       "Name (field AnnTarget.TypeAnnotation[1])",
       "Name (field AnnTarget.ValueAnnotation[1])",
       "Name (field Con.InfixC[2])",
       "Name (field Con.NormalC[1])",
       "Name (field Con.RecC[1])",
       "Name (field Dec.ClassD[2])",
       "Name (field Dec.ClosedTypeFamilyD[1])",
       "Name (field Dec.DataD[2])",
       "Name (field Dec.DataInstD[2])",
       "Name (field Dec.FamilyD[2])",
       "Name (field Dec.FunD[1])",
       "Name (field Dec.InfixD[2])",
       "Name (field Dec.NewtypeD[2])",
       "Name (field Dec.NewtypeInstD[2])",
       "Name (field Dec.RoleAnnotD[1])",
       "Name (field Dec.SigD[1])",
       "Name (field Dec.TySynD[1])",
       "Name (field Dec.TySynInstD[1])",
       "Name (field Exp.ConE[1])",
       "Name (field Exp.RecConE[1])",
       "Name (field Exp.VarE[1])",
       "Name (field Foreign.ExportF[3])",
       "Name (field Foreign.ImportF[4])",
       "Name (field Pat.AsP[1])",
       "Name (field Pat.ConP[1])",
       "Name (field Pat.InfixP[2])",
       "Name (field Pat.RecP[1])",
       "Name (field Pat.UInfixP[2])",
       "Name (field Pat.VarP[1])",
       "Name (field Pragma.InlineP[1])",
       "Name (field Pragma.SpecialiseP[1])",
       "Name (field Pred.ClassP[1])",
       "Name (field RuleBndr.RuleVar[1])",
       "Name (field RuleBndr.TypedRuleVar[1])",
       "Name (field TyVarBndr.KindedTV[1])",
       "Name (field TyVarBndr.PlainTV[1])",
       "Name (field Type.ConT[1])",
       "Name (field Type.PromotedT[1])",
       "Name (field Type.VarT[1])",
       "NameFlavour (field Name.Name[2])",
       "NameSpace (field NameFlavour.NameG[1])",
       "OccName (field Name.Name[1])",
       "Pat (field Dec.ValD[1])",
       "Pat (field Match.Match[1])",
       "Pat (field Pat.AsP[2])",
       "Pat (field Pat.BangP[1])",
       "Pat (field Pat.InfixP[1])",
       "Pat (field Pat.InfixP[3])",
       "Pat (field Pat.ParensP[1])",
       "Pat (field Pat.SigP[1])",
       "Pat (field Pat.TildeP[1])",
       "Pat (field Pat.UInfixP[1])",
       "Pat (field Pat.UInfixP[3])",
       "Pat (field Pat.ViewP[2])",
       "Pat (field Stmt.BindS[1])",
       "Phases (field Pragma.InlineP[4])",
       "Phases (field Pragma.RuleP[5])",
       "Phases (field Pragma.SpecialiseP[4])",
       "PkgName (field NameFlavour.NameG[2])",
       "Pragma (field Dec.PragmaD[1])",
       "Range (field Exp.ArithSeqE[1])",
       "Ratio Integer (aka Rational, field Lit.DoublePrimL[1])",
       "Ratio Integer (aka Rational, field Lit.FloatPrimL[1])",
       "Ratio Integer (aka Rational, field Lit.RationalL[1])",
       "RuleMatch (field Pragma.InlineP[3])",
       "Safety (field Foreign.ImportF[2])",
       "TyLit (field Type.LitT[1])",
       "TySynEqn (field Dec.TySynInstD[2])",
       "Type (aka Kind, field TyVarBndr.KindedTV[2])",
       "Type (aka Kind, field Type.SigT[2])",
       "Type (field Dec.InstanceD[2])",
       "Type (field Dec.SigD[2])",
       "Type (field Dec.TySynD[3])",
       "Type (field Exp.SigE[2])",
       "Type (field Foreign.ExportF[4])",
       "Type (field Foreign.ImportF[5])",
       "Type (field Pat.SigP[2])",
       "Type (field Pragma.SpecialiseInstP[1])",
       "Type (field Pragma.SpecialiseP[2])",
       "Type (field Pred.EqualP[1])",
       "Type (field Pred.EqualP[2])",
       "Type (field RuleBndr.TypedRuleVar[2])",
       "Type (field TySynEqn.TySynEqn[2])",
       "Type (field Type.AppT[1])",
       "Type (field Type.AppT[2])",
       "Type (field Type.ForallT[3])",
       "Type (field Type.SigT[1])",
       "Word# (field Word8.W8#[1])",
       "[(Guard, Exp)] (field Body.GuardedB[1])",
       "[(Guard, Exp)] (field Exp.MultiIfE[1])",
       "[(Name, Exp)] (field Exp.RecConE[2])",
       "[(Name, Exp)] (field Exp.RecUpdE[2])",
       "[(Name, Pat)] (field Pat.RecP[2])",
       "[(Name, Strict, Type)] (field Con.RecC[2])",
       "[(Strict, Type)] (field Con.NormalC[2])",
       "[Char] (aka String, field Foreign.ExportF[2])",
       "[Char] (aka String, field Foreign.ImportF[3])",
       "[Char] (aka String, field Lit.StringL[1])",
       "[Char] (aka String, field ModName.ModName[1])",
       "[Char] (aka String, field OccName.OccName[1])",
       "[Char] (aka String, field PkgName.PkgName[1])",
       "[Char] (aka String, field Pragma.RuleP[1])",
       "[Char] (aka String, field TyLit.StrTyLit[1])",
       "[Clause] (field Dec.FunD[2])",
       "[Con] (field Dec.DataD[4])",
       "[Con] (field Dec.DataInstD[4])",
       "[Dec] (field Clause.Clause[3])",
       "[Dec] (field Dec.ClassD[5])",
       "[Dec] (field Dec.InstanceD[3])",
       "[Dec] (field Dec.ValD[3])",
       "[Dec] (field Exp.LetE[1])",
       "[Dec] (field Match.Match[3])",
       "[Dec] (field Stmt.LetS[1])",
       "[Exp] (field Exp.ListE[1])",
       "[Exp] (field Exp.TupE[1])",
       "[Exp] (field Exp.UnboxedTupE[1])",
       "[FunDep] (field Dec.ClassD[4])",
       "[Match] (field Exp.CaseE[2])",
       "[Match] (field Exp.LamCaseE[1])",
       "[Name] (field Dec.DataD[5])",
       "[Name] (field Dec.DataInstD[5])",
       "[Name] (field Dec.NewtypeD[5])",
       "[Name] (field Dec.NewtypeInstD[5])",
       "[Name] (field FunDep.FunDep[1])",
       "[Name] (field FunDep.FunDep[2])",
       "[Pat] (field Clause.Clause[1])",
       "[Pat] (field Exp.LamE[1])",
       "[Pat] (field Pat.ConP[2])",
       "[Pat] (field Pat.ListP[1])",
       "[Pat] (field Pat.TupP[1])",
       "[Pat] (field Pat.UnboxedTupP[1])",
       "[Pred] (aka Cxt, field Con.ForallC[2])",
       "[Pred] (aka Cxt, field Dec.ClassD[1])",
       "[Pred] (aka Cxt, field Dec.DataD[1])",
       "[Pred] (aka Cxt, field Dec.DataInstD[1])",
       "[Pred] (aka Cxt, field Dec.InstanceD[1])",
       "[Pred] (aka Cxt, field Dec.NewtypeD[1])",
       "[Pred] (aka Cxt, field Dec.NewtypeInstD[1])",
       "[Pred] (aka Cxt, field Type.ForallT[2])",
       "[Role] (field Dec.RoleAnnotD[2])",
       "[RuleBndr] (field Pragma.RuleP[2])",
       "[Stmt] (field Exp.CompE[1])",
       "[Stmt] (field Exp.DoE[1])",
       "[Stmt] (field Guard.PatG[1])",
       "[TySynEqn] (field Dec.ClosedTypeFamilyD[4])",
       "[TyVarBndr] (field Con.ForallC[1])",
       "[TyVarBndr] (field Dec.ClassD[3])",
       "[TyVarBndr] (field Dec.ClosedTypeFamilyD[2])",
       "[TyVarBndr] (field Dec.DataD[3])",
       "[TyVarBndr] (field Dec.FamilyD[3])",
       "[TyVarBndr] (field Dec.NewtypeD[3])",
       "[TyVarBndr] (field Dec.TySynD[2])",
       "[TyVarBndr] (field Type.ForallT[1])",
       "[Type] (field Dec.DataInstD[3])",
       "[Type] (field Dec.NewtypeInstD[3])",
       "[Type] (field Pred.ClassP[2])",
       "[Type] (field TySynEqn.TySynEqn[1])",
       "[Word8] (field Lit.StringPrimL[1])",
       "[[Stmt]] (field Stmt.ParS[1])"
      ]


subtypesOfDec :: Set String
subtypesOfDec =
    union
       arity0SubtypesOfDec
       (Set.fromList ["(,)",
                      "(,) Guard",
                      "(,) Name",
                      "(,) Strict",
                      "(,,)",
                      "(,,) Name",
                      "(,,) Name Strict",
                      "Maybe",
                      "Ratio",
                      "[]",
                      "a (field Maybe.Just[1])",
                      "a (field Ratio.:%[1])",
                      "a (field Ratio.:%[2])"])

simpleSubtypesOfDec :: Set String
simpleSubtypesOfDec =
    Set.fromList [
#if MIN_VERSION_template_haskell(2,10,0)
              "BigNat",
#else
              "Pred",
              "[Pred]",
#endif
              "(,)",
              "(,) Guard",
              "(,) Name",
              "(,) Strict",
              "(,,)",
              "(,,) Name",
              "(,,) Name Strict",
              "(Guard, Exp)",
              "(Name, Exp)",
              "(Name, Pat)",
              "(Name, Strict, Type)",
              "(Strict, Type)",
              "AnnTarget",
              "Body",
              "ByteArray#",
              "Callconv",
              "Char",
              "Char#",
              "Clause",
              "Con",
              "Dec",
              "Exp",
              "FamFlavour",
              "Fixity",
              "FixityDirection",
              "Foreign",
              "FunDep",
              "Guard",
              "Inline",
              "Int",
              "Int#",
              "Integer",
              "Lit",
              "Match",
              "Maybe",
              "Maybe Exp",
              "Maybe Inline",
              "Maybe Type",
              "ModName",
              "Name",
              "NameFlavour",
              "NameSpace",
              "OccName",
              "Pat",
              "Phases",
              "PkgName",
              "Pragma",
              "Range",
              "Ratio",
              "Ratio Integer",
              "Role",
              "RuleBndr",
              "RuleMatch",
              "Safety",
              "Stmt",
              "Strict",
              "TyLit",
              "TySynEqn",
              "TyVarBndr",
              "Type",
              "Word#",
              "Word8",
              "[(Guard, Exp)]",
              "[(Name, Exp)]",
              "[(Name, Pat)]",
              "[(Name, Strict, Type)]",
              "[(Strict, Type)]",
              "[Char]",
              "[Clause]",
              "[Con]",
              "[Dec]",
              "[Exp]",
              "[FunDep]",
              "[Match]",
              "[Name]",
              "[Pat]",
              "[Role]",
              "[RuleBndr]",
              "[Stmt]",
              "[TySynEqn]",
              "[TyVarBndr]",
              "[Type]",
              "[Word8]",
              "[[Stmt]]",
              "[]",
              "a"]

bitsInstances :: Set String
bitsInstances
    = Set.fromList
       [
#if MIN_VERSION_template_haskell(2,10,0)
        "instance Bits CChar","instance Bits CInt","instance Bits CIntMax","instance Bits CIntPtr","instance Bits CLLong","instance Bits CLong","instance Bits CPtrdiff","instance Bits CSChar","instance Bits CShort","instance Bits CSigAtomic","instance Bits CSize","instance Bits CUChar","instance Bits CUInt","instance Bits CUIntMax","instance Bits CUIntPtr","instance Bits CULLong","instance Bits CULong","instance Bits CUShort","instance Bits CWchar",
#endif
        "instance Bits Bool","instance Bits Int","instance Bits Integer","instance Bits Word","instance Bits Word16","instance Bits Word32","instance Bits Word64","instance Bits Word8",
        -- These come and go depending on the version of something.
        "instance Bits Int16","instance Bits Int32","instance Bits Int64","instance Bits Int8","instance Bits Natural" ]

enumInstances :: Set String
enumInstances =
    Set.fromList
    [
#if MIN_VERSION_template_haskell(2,10,0)
     "instance Enum (Fixed a)","instance Enum (Proxy s)","instance Enum (f a) => Enum (Alt f a)","instance Enum CChar","instance Enum CClock","instance Enum CDouble","instance Enum CFloat","instance Enum CInt","instance Enum CIntMax","instance Enum CIntPtr","instance Enum CLLong","instance Enum CLong","instance Enum CPtrdiff","instance Enum CSChar","instance Enum CSUSeconds","instance Enum CShort","instance Enum CSigAtomic","instance Enum CSize","instance Enum CTime","instance Enum CUChar","instance Enum CUInt","instance Enum CUIntMax","instance Enum CUIntPtr","instance Enum CULLong","instance Enum CULong","instance Enum CUSeconds","instance Enum CUShort","instance Enum CWchar","instance Enum Day","instance Enum NominalDiffTime",
#endif
     "instance Enum ()","instance Enum Bool","instance Enum Char","instance Enum Double","instance Enum Float","instance Enum Int","instance Enum Int16","instance Enum Int32","instance Enum Int64","instance Enum Int8","instance Enum Integer","instance Enum Natural","instance Enum Ordering","instance Enum Word","instance Enum Word16","instance Enum Word32","instance Enum Word64","instance Enum Word8","instance Integral a => Enum (Ratio a)"]

arrayInstances :: Set String
arrayInstances =
    Set.fromList ["instance IArray UArray (FunPtr a)","instance IArray UArray (Ptr a)","instance IArray UArray (StablePtr a)","instance IArray UArray Bool","instance IArray UArray Char","instance IArray UArray Double","instance IArray UArray Float","instance IArray UArray Int","instance IArray UArray Int16","instance IArray UArray Int32","instance IArray UArray Int64","instance IArray UArray Int8","instance IArray UArray Word","instance IArray UArray Word16","instance IArray UArray Word32","instance IArray UArray Word64","instance IArray UArray Word8"]

decTypeSynonyms :: Map (E Type) (Set Name)
decTypeSynonyms =
    Map.fromList [(markExpanded (AppT (AppT (TupleT 2) (ConT ''Strict)) (ConT ''Type)), Set.fromList [''StrictType]),
                  (markExpanded (AppT (ConT ''Ratio) (ConT ''Integer)),                 Set.fromList [''Rational]),
                  (markExpanded (AppT ListT (ConT ''Char)),                             Set.fromList [''String]),
                  (markExpanded (AppT ListT (ConT ''Pred)),                             Set.fromList [''Cxt]),
                  (markExpanded (ConT ''Type),                                          Set.fromList [''Kind])]
